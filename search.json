[{"title":"Mac下Java开发环境搭建","url":"http://blog.wuzhiwei.cn/2017/06/16/mac-java-start.html","content":"<p>最近公司要求几个Java项目，所以要把大学时期学习的Java捡起来，虽然在学校学习的是Java、JSP的一套，但毕业后就没写过了，一直做的PHP。也好借此机会重新学习一下吧，首先需要的当然是搭建开发环境，没有环境怎么玩！一步一步来吧~</p>\n<h2 id=\"一、安装JDK\"><a href=\"#一、安装JDK\" class=\"headerlink\" title=\"一、安装JDK\"></a>一、安装JDK</h2><p><strong>JDK</strong>是Java语言的软件开发工具包，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个Java开发的核心，它包含了Java的运行环境，Java工具和Java基础的类库。<br>没有JDK的话，无法编译Java程序。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"code\"><pre><div class=\"line\">-<span class=\"ruby\">&gt; java -version</span></div><div class=\"line\">No Java runtime present, requesting install.</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">官网下载</a>相应的JDK版本，然后安装（傻瓜式）。安装完成后，再打开Terminal，执行命令<code>java -version</code>即可查看到我们安装的JDK版本信息。</p>\n<h2 id=\"二、配置环境变量\"><a href=\"#二、配置环境变量\" class=\"headerlink\" title=\"二、配置环境变量\"></a>二、配置环境变量</h2><figure class=\"highlight haml\"><table><tr><td class=\"code\"><pre><div class=\"line\">-<span class=\"ruby\">&gt; <span class=\"regexp\">/usr/libexec</span><span class=\"regexp\">/java_home -v # 查看JDK真实路径</span></span></div><div class=\"line\"><span class=\"comment\">/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home</span></div></pre></td></tr></table></figure>\n<p>复制以上路径，编辑配置文件：<code>sudo vim /etc/profile</code>添加Java环境变量配置，如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Java环境变量配置</span></div><div class=\"line\"><span class=\"attribute\">JAVA_HOME</span>=<span class=\"string\">\"/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home\"</span></div><div class=\"line\"><span class=\"attribute\">CLASS_PATH</span>=<span class=\"string\">\".:<span class=\"variable\">$JAVA_HOME</span>/lib\"</span></div><div class=\"line\"><span class=\"comment\"># 把JAVA添加到环境变量PATH中</span></div><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"三、配置服务器tomcat\"><a href=\"#三、配置服务器tomcat\" class=\"headerlink\" title=\"三、配置服务器tomcat\"></a>三、配置服务器tomcat</h2><p><a href=\"http://tomcat.apache.org/download-90.cgi\" target=\"_blank\" rel=\"external\">官网下载</a>对应版本，解压到自己想放置的位置。<code>sudo vim /etc/profile</code>添加Tomcat环境变量配置，如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Tomcat环境变量配置</span></div><div class=\"line\"><span class=\"attribute\">TOMCAT_HOME</span>=<span class=\"string\">\"/usr/local/tomcat\"</span></div><div class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:<span class=\"variable\">$TOMCAT_HOME</span>/bin\"</span></div></pre></td></tr></table></figure>\n<p>设置完成后，执行<code>sudo chmod +x $TOMCAT_HOME/bin/*.sh</code>，之后可以使用<code>$TOMCAT_HOME/bin/startup.sh</code>启动Tomcat，默认端口为8080。浏览器访问<em>localhost:8080</em>即可看到Tomcat的相关信息界面。</p>\n<h2 id=\"四、开发工具IDE\"><a href=\"#四、开发工具IDE\" class=\"headerlink\" title=\"四、开发工具IDE\"></a>四、开发工具IDE</h2><ul>\n<li><a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"external\">IntelliJ IDEA</a>，<a href=\"http://www.phperz.com/special/83.html\" target=\"_blank\" rel=\"external\">IntelliJ IDEA使用教程</a>。</li>\n<li><a href=\"http://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"external\">Eclipse</a></li>\n<li><a href=\"https://www.eclipse.org/che/getting-started/download/\" target=\"_blank\" rel=\"external\">Eclipse Che</a></li>\n<li><a href=\"https://netbeans.org/downloads/index.html\" target=\"_blank\" rel=\"external\">NetBeans</a></li>\n</ul>\n","categories":["Mac","Java"],"tags":[]},{"title":"Git Stash用法","url":"http://blog.wuzhiwei.cn/2017/04/27/git-stash.html","content":"<p>在编码过程中经常会碰到突发BUG，需要紧急修复的场景（<em>BUG高于需求</em>）。可能与你写到一半的代码（<em>没有完成，不该提交</em>）产生冲突，这时Git为我们提供<code>git stash</code>命令将工作现场<strong>暂存</strong>起来，等以后恢复现场后继续之前未完成的编码。相关命令参考：</p>\n<blockquote>\n<p>注：[]方括号中内容为可选，[<stash>]里面的stash代表进度的编号形如：stash@{0}, &lt;&gt;尖括号内的必填。</stash></p>\n</blockquote>\n<ul>\n<li><code>git stash</code><br>对当前的暂存区和工作区状态进行保存。</li>\n<li><code>git stash list</code><br>列出所有保存的进度列表。</li>\n<li><code>git stash pop [--index] [&lt;stash&gt;]</code><br>恢复工作进度现场。<br><code>--index</code>参数表示不仅恢复工作区，还恢复暂存区；<br><code>&lt;stash&gt;</code>指定定恢复某个具体进度，如果没有这个参数，则默认恢复最新的进度。如：<code>git stash pop --index stash@{0}</code>表示恢复编号为0的进度的工作区和暂存区。</li>\n<li><code>git stash [save message] [-k|--no-keep-index] [--patch]</code><br><strong>这是<code>git stash</code>最完整的命令形式</strong>。使用<code>save</code>可以对进度添加备注，如<code>git stash save &quot;备注&quot;</code>。<br><code>-k</code>和<code>--no-keep-index</code>指定保存进度后，是否重置暂存区。<br><code>--patch</code>会显示工作区和HEAD的差异，通过编辑差异文件，排除不需要保存的内容。</li>\n<li><code>git stash apply [--index] [&lt;stash&gt;]</code><br>不删除已恢复的进度，其他同<code>git stash pop</code>。</li>\n<li><code>git stash drop [&lt;stash&gt;]</code><br>删除某一个进度，默认删除最新进度。</li>\n<li><code>git stash clear</code><br>删除所有进度。</li>\n<li><code>git stash branch &lt;branchname&gt; &lt;stash&gt;</code><br>基于进度创建分支。</li>\n</ul>\n","categories":["Git"],"tags":[]},{"title":"iTerm2常用快捷键","url":"http://blog.wuzhiwei.cn/2017/04/25/iterm2-shortcut-key.html","content":"<p><strong>iTerm2</strong>开源免费，与<em>zsh</em>搭配差不多已经取代了<em>Terminal + bash</em>成为Mac上终端工具的标准配置。下面整理<strong>iTerm2</strong>使用过程中常用的快捷键。</p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><ul>\n<li>新建标签：<code>command + t</code></li>\n<li>关闭标签：<code>command + w</code></li>\n<li>切换标签：<code>command + 数字</code>或<code>command + 左右方向键</code></li>\n<li>切换全屏：<code>command + enter</code></li>\n<li>全文查找：<code>command + f</code></li>\n</ul>\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><ul>\n<li>垂直分屏：<code>command + d</code></li>\n<li>水平分屏：<code>command + shift + d</code></li>\n<li>切换屏幕：<code>command + option + 方向键</code>或<code>command + [</code>或<code>command + ]</code></li>\n<li>查看历史命令：<code>command + ;</code></li>\n<li>查看剪贴板历史：<code>command + shift + h</code></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>打开文件、文件夹和链接：<code>command + Click</code></li>\n<li>新建窗口：<code>command + n</code></li>\n<li>清除当前行：<code>ctrl + u</code></li>\n<li>到行首：<code>ctrl + a</code></li>\n<li>到行尾：<code>ctrl + e</code></li>\n<li>上一条命令：<code>ctrl + p</code></li>\n<li>搜索命令历史：<code>ctrl + r</code></li>\n<li>删除当前光标的字符：<code>ctrl + d</code></li>\n<li>删除光标之前的字符：<code>ctrl + h</code></li>\n<li>删除光标之前的单词：<code>ctrl + w</code></li>\n<li>删除到文本末尾：<code>ctrl + k</code></li>\n<li>交换光标处广本：<code>ctrl + t</code></li>\n<li>清屏：<code>command + r</code>或<code>ctrl + l</code></li>\n</ul>\n","categories":["Mac","iTerms"],"tags":[]},{"title":"VIM操作技巧总结","url":"http://blog.wuzhiwei.cn/2017/04/21/vim-tips.html","content":"<p>Vi最初是由Bill Joy于1976年编码实现的，而Vim(Vi IMproved)则是改进的Vi，由Bram Moolenaar在1991年开发并发布。Vi/Vim是所有Unix/Linux操作系统默认配备的编辑器。功能强大、操作高效，命令非常多、用法极为灵活。</p>\n<p>“工欲善其事，必先利其器”。在Vi/Vim版本的选择上，原则是<strong>“能用Vim就不要使用Vi；能用最新版就不要守着旧版本”</strong>。Vim提供的功能和特性要比Vi多得多，如语法加亮着色功能等。</p>\n<h1 id=\"启动关闭命令\"><a href=\"#启动关闭命令\" class=\"headerlink\" title=\"启动关闭命令\"></a>启动关闭命令</h1><p>启动及关闭Vi/Vim的基本命令，见下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">启动</td>\n<td style=\"text-align:left\"><code>vi</code>打开Vi/Vim<br><code>vi &lt;file&gt;</code>打开Vi/Vim，并加载文件<file></file></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">退出</td>\n<td style=\"text-align:left\"><code>ZQ</code>/<code>:q!</code>无条件退出<br><code>ZZ</code>/<code>:wq</code>保存退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">保存部分文件</td>\n<td style=\"text-align:left\"><code>:m,nw &lt;file&gt;</code>将m行到n行部分的内容保存到文件<file>中<br><code>:m,n &gt;&gt; &lt;file&gt;</code>将m行到n行的内容添加到文件<file>的末尾</file></file></td>\n</tr>\n</tbody>\n</table>\n<p>临时退出Vi/Vim、进入shell环境后再回来的方法：</p>\n<ul>\n<li><strong>方法一、使用<code>Ctrl+z</code>和<code>fg</code>这两个命令组合。</strong></li>\n</ul>\n<p>这一解决方法主要利用了Linux/Unix的作业机制。具体原理是：<code>Ctrl+z</code>命令将当前的Vi/Vim进程<em>放到后台执行</em>，之后shell环境即可为你所用；<code>fg</code>命令则将位于后台的Vi/Vim进程放到前台执行，这样我们就再次进入Vi/Vim操作界面并恢复到原先的编辑状态。</p>\n<ul>\n<li><strong>方法二、使用行命令<code>:sh</code>。</strong></li>\n</ul>\n<p>在Vi/Vim的命令模式下输入<code>:sh</code>即可进入Linux/Unix shell环境。在要返回到Vi/Vim编辑环境时，输入<code>exit</code>命令即可。</p>\n<h1 id=\"移动光标命令\"><a href=\"#移动光标命令\" class=\"headerlink\" title=\"移动光标命令\"></a>移动光标命令</h1><p>Vi/Vim中关于光标移动的命令非常多，这也是很多人经常困惑并且命令用不好的地方之一。其实Vi/Vim中很多命令是<em>针对不同的操作单位</em>而设的，<strong>不同的命令对应不同的操作单位</strong>。因而，在使用命令进行操作的时候，首先要搞清楚的就是要采用哪种<em>操作单位</em>，也就是说，是要操作<em>一个字符</em>，<em>一个句子</em>，<em>一个段落</em>，还是要操作<em>一行</em>，<em>一屏</em>、<em>一页</em>。单位不同，命令也就不同。只要单位选用得当，命令自然就恰当，操作也自然迅速高效；否则，只能是费时费力。这也可以说是最能体现Vi/Vim优越于其它编辑器的地方之一，也是Vi/Vim有人爱有人恨的地方之一。在操作单位确定之后，才是操作次数，即确定命令重复执行的次数。要正确高效的运用Vi/Vim的各种操作，一定要把握这一原则：<strong>先定单位再定量</strong>。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：<code>5h</code>命令左移5个字符，<code>8w</code>命令右移8个单词。</p>\n<p>Vi/Vim中操作单位有很多，按从小到大的顺序为（括号内为相应的操作命令）：<em>字符（h、l）→ 单词 (w、W、b、B、e、E) → 行 (j、k、0、^、$、:n) → 句子（(、)）→ 段落（{、}）→ 屏 (H、M、L) → 页（Ctrl-f、Ctrl-b、Ctrl-u、Ctrl-d) → 文件（G、gg、:0、:$）</em>。</p>\n<p>具体命令解释如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作单位</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单词</td>\n<td style=\"text-align:left\"><code>w</code>/<code>W</code>移动到下一单词的开头<br><code>b</code>/<code>B</code>移动到上一单词的开头<br><code>e</code>/<code>E</code>移动到光标所在单词的末尾</td>\n<td style=\"text-align:left\"><code>W</code>、<code>B</code>、<code>E</code>命令操作的单词是以空白字符（空格、Tab）<br>分隔的字串，比如字符串“str1-str2 str3-str4”，<br>对<code>W</code>、<code>B</code>、<code>E</code>命令来说是两个单词，<br>而对<code>w</code>、<code>b</code>、<code>e</code>命令来说则是四个单词</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行</td>\n<td style=\"text-align:left\"><code>j</code>下移一行<br><code>k</code>上移一行<br><code>0</code>移到当前行形头<br><code>^</code>移到当前行的第一个非空字符<br><code>$</code>移到当前行末尾<br><code>:n</code>移动到第n行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">句子</td>\n<td style=\"text-align:left\"><code>)</code>移到当前句子的末尾<br><code>(</code>移到当前句子的开头</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">段落</td>\n<td style=\"text-align:left\"><code>}</code>移到当前段落的末尾<br><code>{</code>移到当前段落的开头</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">屏</td>\n<td style=\"text-align:left\"><code>H</code>移到屏幕的第一行<br><code>M</code>移到屏幕的中间一行<br><code>L</code>移到屏幕的最后一行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">页</td>\n<td style=\"text-align:left\"><code>Ctrl+f</code>向前滚动一页<br><code>Ctrl+b</code>向后滚动一页<br><code>Ctrl+u</code>向前滚动半页<br><code>Ctrl+d</code>向后滚动半页</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文件</td>\n<td style=\"text-align:left\"><code>G</code>移动到文件末尾<br><code>gg</code>移动到文件开头<br><code>:0</code>移动到文件第一行<br><code>:$</code>移动到文件最后一行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"文本编辑命令\"><a href=\"#文本编辑命令\" class=\"headerlink\" title=\"文本编辑命令\"></a>文本编辑命令</h1><p>与光标移动一样，Vi/Vim中关于编辑操作的命令也比较多，但操作单位要比移动光标少得多。按从小到大的顺序为（括号内为相应的操作命令）：<em>字符 （x、c、s、r、i、a）→ 单词 (cw、cW、cb、cB、dw、dW、db、dB) → 行 (dd、d0、d$、I、A、o、O) → 句子（(、)）→ 段落（{、}）</em>。这些操作单位有些可以加操作次数。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：<code>d3w</code>命令删除三个单词，<code>10dd</code>命令删除十行。</p>\n<p>具体命令解释如下：</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作单位</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">字符</td>\n<td style=\"text-align:left\"><code>x</code>删除光标位置的字符<br><code>c</code>更改当前字符并进入插入模式<br><code>s</code>替换光标位置的字符并进入插入模式<br><code>r</code>替换光标位置的字符但不进入插入模式<br><code>i</code>在当前位置的字符之前进入插入模式<br><code>a</code>在当前位置的字符之后进入插入模式</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单词</td>\n<td style=\"text-align:left\"><code>cw</code>/<code>cW</code>删除当前单词从光标开始的部分并进入插入模式<br><code>cb</code>/<code>cB</code>删除当前单词从光标所在位置至单词开始的部分并进入插入模式<br><code>dw</code>/<code>dW</code>删除当前单词从光标开始的部分但不进入插入模式<br><code>db</code>/<code>dB</code>删除当前单词从光标所在位置至单词开始的部分但不进入插入模式</td>\n<td style=\"text-align:left\"><code>cW</code>、<code>cB</code>、<code>dW</code>、<code>dB</code>命令操作的单词是以空白字符（空格、Tab）<br>分隔的字串，比如字符串“str1-str2 str3-str4”，<br>对<code>cW</code>、<code>cB</code>、<code>dW</code>、<code>dB</code>命令来说是两个单词，<br>而对<code>cw</code>、<code>cb</code>、<code>dw</code>、<code>db</code>命令来说则是四个单词</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行</td>\n<td style=\"text-align:left\"><code>dd</code>删除当前行<br><code>d0</code>删除从当前光标开始到行首的内容<br><code>d$</code>删除从当前光标开始到行末的内容<br><code>I</code>在当前行的行首进入插入模式<br><code>A</code>在当前行的行尾进入插入模式<br><code>o</code>在当前行下方另起一行进入插入模式<br><code>O</code>在当前行上方另起一行进入插入模式</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">句子</td>\n<td style=\"text-align:left\"><code>d)</code>删除当前句子从光标位置开始到句末的内容<br><code>d(</code>删除当前句子从光标位置开始到句首的内容</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">段落</td>\n<td style=\"text-align:left\"><code>d}</code>删除当前段落从光标位置开始到段末的内容<br><code>d{</code>删除当前段落从光标位置开始到段首的内容</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"高效命令\"><a href=\"#高效命令\" class=\"headerlink\" title=\"高效命令\"></a>高效命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">复制与粘贴</td>\n<td style=\"text-align:left\"><code>yw</code>复制当前单词从光标开始的部分<br><code>yy</code>复制光标所在行的所有字符<br><code>p</code>将最后一个删除或复制文本放在当前字符之后<br><code>P</code>将最后一个删除或复制文本放在当前字符之前</td>\n<td style=\"text-align:left\">配合操作数使用可快速拷贝编辑文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">撤消与重做</td>\n<td style=\"text-align:left\"><code>u</code>撤消更改<br><code>Ctrl+R</code>重做更改</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重复操作</td>\n<td style=\"text-align:left\"><code>.</code>重复上次操作</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交换相邻<br>字符或行</td>\n<td style=\"text-align:left\"><code>xp</code>交换光标位置的字符和它右边的字符<br><code>ddp</code>交换光标位置的行和它的下一行</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大小写转换</td>\n<td style=\"text-align:left\"><code>~</code>将光标下的字母大小写反向转换<br><code>guw</code>将光标所在的单词变为小写<br><code>gUw</code>将光标所在的单词变为大写<br><code>guu</code>光标所在的行所有字符变为小写<br><code>gUU</code>光标所在的行所有字符变为大写<br><code>g~~</code>光标所在的行所有字符大小写反向转换</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">取得外部输入</td>\n<td style=\"text-align:left\"><code>:r!&lt;cmd&gt;</code>将命令<cmd>的输出结果插入到当前光标所在位置<br><code>:r &lt;file&gt;</code>将文件<file>读入到当前光标所在位置</file></cmd></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">排序</td>\n<td style=\"text-align:left\"><code>:1,$!sort</code>将文件内的所有内容排序</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">加入行号</td>\n<td style=\"text-align:left\"><code>:%!nl</code>在所有非空行前加入行号<br><code>:%!nl -ba</code>在所有行前加入行号</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">缩进</td>\n<td style=\"text-align:left\"><code>&gt;&gt;</code>右缩进，可配合操作数使用<br><code>&lt;&lt;</code>左缩进，可配合操作数使用</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">自动补全</td>\n<td style=\"text-align:left\"><code>Ctrl+p</code>自动补全</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示当前编辑文件名</td>\n<td style=\"text-align:left\"><code>Ctrl+g</code>显示当前编辑文件名及行数</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示字符内码</td>\n<td style=\"text-align:left\"><code>ga</code>显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"搜索与替换命令\"><a href=\"#搜索与替换命令\" class=\"headerlink\" title=\"搜索与替换命令\"></a>搜索与替换命令</h1><h2 id=\"文本搜索的基本命令\"><a href=\"#文本搜索的基本命令\" class=\"headerlink\" title=\"文本搜索的基本命令\"></a>文本搜索的基本命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">搜索</td>\n<td style=\"text-align:left\"><code>/</code>在文件中向前搜索<br><code>?</code>在文件中向后搜索</td>\n<td style=\"text-align:left\">可使用正则表达式，可配合操作数使用，<br>比如<code>3/str</code>向前搜索字串str并将光标移到第三个找到的串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索下一个</td>\n<td style=\"text-align:left\"><code>n</code>搜索下一个<br><code>N</code>反向搜索下一个</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文本搜索的高效命令\"><a href=\"#文本搜索的高效命令\" class=\"headerlink\" title=\"文本搜索的高效命令\"></a>文本搜索的高效命令</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">快速搜索</td>\n<td style=\"text-align:left\"><code>*</code>在文件中向前搜索当前光标所在的单词<br><code>#</code>在文件中向后搜索当前光标所在的单词</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示搜索命令历史</td>\n<td style=\"text-align:left\"><code>q/</code>/<code>q?</code>显示搜索命令历史的窗口</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找帮助</td>\n<td style=\"text-align:left\"><code>Shift+k</code>查找光标所在命令或函数的man帮助</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"替换命令\"><a href=\"#替换命令\" class=\"headerlink\" title=\"替换命令\"></a>替换命令</h2><p>关于替换主是要结合搜索使用行命令来实现，命令格式为：</p>\n<p><code>:m,ns/str1/str2/g</code>将m行到n行中的字串str1全部替换为字串str2。</p>\n<p>在众多使用正则表达式进行替换的命令中，平时需要掌握的一个命令是如何快速去除<em>^M</em>字符。在Linux/Unix系统中编辑Windows操作系统中生成的文件时，如果上传时回车换行符处理不正确的话，用Vi/Vim打开经常会出现<em>^M</em>字符。如果上传的文件是shell脚本的话，即使赋予了正确的执行权限该脚本还是无法运行。这也是各种文件在Linux/Unix和Windows中传输经常会出现问题的地方之一。其实，在Vi/Vim中使用替换命令<code>:1,$s/^M//g</code>即可以很容易地快速去掉<em>^M</em>字符。这里需要注意的是<em>^M</em>是使用<code>Ctrl+v</code>、<code>Ctrl+m</code>输入的。</p>\n<h1 id=\"执行外部命令\"><a href=\"#执行外部命令\" class=\"headerlink\" title=\"执行外部命令\"></a>执行外部命令</h1><p>在Vi/Vim中还可以在命令模式下执行各种外部命令，命令格式如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">执行外部命令</td>\n<td style=\"text-align:left\"><code>:!&lt;cmd&gt;</code>执行外部命令<cmd></cmd></td>\n<td style=\"text-align:left\">在命令模式下输入该命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示命令行命令历史</td>\n<td style=\"text-align:left\"><code>q:</code>显示命令行命令历史的窗口</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Vi-Vim设置命令\"><a href=\"#Vi-Vim设置命令\" class=\"headerlink\" title=\"Vi/Vim设置命令\"></a>Vi/Vim设置命令</h1><p>Vi/Vim有很多内部变量，可以根据需要进行相应的设置。变量类型不同往往设置方式也不一样，简单的只要设置特定的变量名即可，复杂的则需要指定和分配一个显式值来设置变量。在实际应用中，如果有需要，请参考Vi/Vim的使用手册。这里主要列出大家经常使用并能提高编辑效率的一些设置命令：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">查看设置的当前值</td>\n<td style=\"text-align:left\"><code>:set all</code>查看Vi/Vim中设置的所有选项的当前值<br><code>:set &lt;option&gt;?</code>查看特定选项<option>的当前值</option></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">设置行号显示与否</td>\n<td style=\"text-align:left\"><code>:set number</code>显示行号<br><code>:set nonumber</code>取消行号显示</td>\n<td style=\"text-align:left\">命令的简写形式：<code>:set nu</code>、<code>:set nonu</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">设置自动缩进</td>\n<td style=\"text-align:left\"><code>:set autoindent</code>设置自动缩进<br><code>:set noautoindent</code>取消自动缩进设置</td>\n<td style=\"text-align:left\">命令的简写形式：<code>:set ai</code>、<code>:set noai</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">设置缩进宽度</td>\n<td style=\"text-align:left\"><code>:set shiftwidth=4</code>设置缩进宽度为4</td>\n<td style=\"text-align:left\">命令的简写形式：<code>:set sw=4</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">设置大小写忽略与否</td>\n<td style=\"text-align:left\"><code>:set ignorecase</code>设置忽略大小<br><code>:set noignorecase</code>取消忽略大小设置</td>\n<td style=\"text-align:left\">命令的简写形式：<code>:set ic</code>、<code>:set noic</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">设置不可见字符显示与否</td>\n<td style=\"text-align:left\"><code>:set list</code>显示不可见字符<br><code>:set nolist</code>取消显示不可见字符设置</td>\n<td style=\"text-align:left\">在显示不可见字符的情况下，<br>TAB键显示为<code>^I</code>，而$显示在每行的结尾</td>\n</tr>\n</tbody>\n</table>\n<p>执行这些设置命令只修改当前会话的设置，退出或重启Vi/Vim这些设置就丢失了。要想保持住这些设置，就必须将这些设置写入Vi/Vim的<em>vimrc</em>文件。对Linux/Unix操作系统来说，每个用户的<em>vimrc</em>文件位于该用户的主目录下，文件名为<em>.vimrc</em>。Vi/Vim在每次启动的时候都会读取用户主目录下的<em>vimrc</em>文件并据此设置Vi/Vim的使用环境。</p>\n","categories":["Linux","vim"],"tags":[]},{"title":"享元模式（Flyweight Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-flyweight.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>享元模式(Flyweight Pattern)：</strong>运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象享元角色</span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">($state)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体享元角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_intrinsicState = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($state)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_intrinsicState = $state;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">($state)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'ConcreteFlyweight operation, Intrinsic State = '</span> . <span class=\"keyword\">$this</span>-&gt;_intrinsicState</div><div class=\"line\">        . <span class=\"string\">' Extrinsic State = '</span> . $state . <span class=\"string\">'&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 不共享的具体享元，客户端直接调用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_intrinsicState = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($state)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_intrinsicState = $state;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">($state)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'UnsharedConcreteFlyweight operation, Intrinsic State = '</span> . <span class=\"keyword\">$this</span>-&gt;_intrinsicState</div><div class=\"line\">        . <span class=\"string\">' Extrinsic State = '</span> . $state . <span class=\"string\">'&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 享元工厂角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_flyweights;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_flyweights = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFlyweigth</span><span class=\"params\">($state)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_flyweights[$state])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_flyweights[$state];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_flyweights[$state] = <span class=\"keyword\">new</span> ConcreteFlyweight($state);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $flyweightFactory = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\">        $flyweight = $flyweightFactory-&gt;getFlyweigth(<span class=\"string\">'state A'</span>);</div><div class=\"line\">        $flyweight-&gt;operation(<span class=\"string\">'other state A'</span>);</div><div class=\"line\"></div><div class=\"line\">        $flyweight = $flyweightFactory-&gt;getFlyweigth(<span class=\"string\">'state B'</span>);</div><div class=\"line\">        $flyweight-&gt;operation(<span class=\"string\">'other state B'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 不共享的对象，单独调用 */</span></div><div class=\"line\">        $uflyweight = <span class=\"keyword\">new</span> UnsharedConcreteFlyweight(<span class=\"string\">'state A'</span>);</div><div class=\"line\">        $uflyweight-&gt;operation(<span class=\"string\">'other state A'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>享元模式是一个考虑系统性能的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能。</p>\n<p>享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</p>\n<p>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态(Internal State)和外部状态(External State)。</p>\n<ul>\n<li>内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享。</li>\n<li>外部状态是随环境改变而改变的、不可以共享的状态。享元对象的外部状态必须由客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的。</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>享元模式的优点：</p>\n<ol>\n<li>享元模式的优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li>\n<li>享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>享元模式的缺点：</p>\n<ol>\n<li>享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li>\n<li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用享元模式：</p>\n<ol>\n<li>一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费。</li>\n<li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li>\n<li>使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复使用享元对象时才值得使用享元模式。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>\n<li>享元模式包含四个角色：抽象享元类声明一个接口，通过它可以接受并作用于外部状态；具体享元类实现了抽象享元接口，其实例称为享元对象；非共享具体享元是不能被共享的抽象享元类的子类；享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>\n<li>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态和外部状态。其中内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享；外部状态是随环境改变而改变的、不可以共享的状态。</li>\n<li>享元模式主要优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份；其缺点是使得系统更加复杂，并且需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li>\n<li>享元模式适用情况包括：一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费；对象的大部分状态都可以外部化，可以将这些外部状态传入对象中；多次重复使用享元对象。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"外观模式（Facade Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-facade.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>外观模式(Facade Pattern)：</strong>外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为<em>门面模式</em>，它是一种对象结构型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 相机类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Camera</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 打开录像机</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">turnOn</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Turning on the camera.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭录像机</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">turnOff</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Turning off the camera.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 转到录像机</div><div class=\"line\">     * <span class=\"doctag\">@param</span> &lt;type&gt; $degrees</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rotate</span><span class=\"params\">($degrees)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'rotating the camera by '</span>, $degrees, <span class=\"string\">' degrees.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 灯类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Light</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 开灯</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">turnOn</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Turning on the light.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关灯</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">turnOff</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Turning off the light.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 换灯泡</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeBulb</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'changing the light-bulb.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 感应器</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sensor</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 启动感应器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Activating the sensor.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭感应器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deactivate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Deactivating the sensor.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 触发感应器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'The sensor has been trigged.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alarm</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 启动警报器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Activating the alarm.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 关闭警报器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deactivate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Deactivating the alarm.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 拉响警报器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ring</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Ring the alarm.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 停掉警报器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopRing</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Stop the alarm.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 门面类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityFacade</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 录像机 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_camera1, $_camera2;</div><div class=\"line\">    <span class=\"comment\">/* 灯 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_light1, $_light2, $_light3;</div><div class=\"line\">    <span class=\"comment\">/* 感应器 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_sensor;</div><div class=\"line\">    <span class=\"comment\">/* 警报器 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_alarm;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_camera1 = <span class=\"keyword\">new</span> Camera();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_camera2 = <span class=\"keyword\">new</span> Camera();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light1 = <span class=\"keyword\">new</span> Light();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light2 = <span class=\"keyword\">new</span> Light();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light3 = <span class=\"keyword\">new</span> Light();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_sensor = <span class=\"keyword\">new</span> Sensor();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_alarm = <span class=\"keyword\">new</span> Alarm();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_camera1-&gt;turnOn();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_camera2-&gt;turnOn();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light1-&gt;turnOn();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light2-&gt;turnOn();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light3-&gt;turnOn();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_sensor-&gt;activate();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_alarm-&gt;activate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deactivate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_camera1-&gt;turnOff();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_camera2-&gt;turnOff();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light1-&gt;turnOff();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light2-&gt;turnOff();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_light3-&gt;turnOff();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_sensor-&gt;deactivate();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_alarm-&gt;deactivate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_security;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>::$_security = <span class=\"keyword\">new</span> SecurityFacade();</div><div class=\"line\">        <span class=\"keyword\">self</span>::$_security-&gt;activate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。</p>\n<ul>\n<li>外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。</li>\n<li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li>\n<li>外观模式的目的在于降低系统的复杂程度。</li>\n<li>外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>外观模式的优点：</p>\n<ol>\n<li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li>\n<li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li>\n<li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li>\n<li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>外观模式的缺点：</p>\n<ol>\n<li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li>\n<li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用外观模式：</p>\n<ol>\n<li>要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li>\n<li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li>\n<li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n<li>外观模式包含两个角色：外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li>\n<li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li>\n<li>外观模式主要优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程；其缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>\n<li>外观模式适用情况包括：要为一个复杂子系统提供一个简单接口；客户程序与多个子系统之间存在很大的依赖性；在层次化结构中，需要定义系统中每一层的入口，使得层与层之间不直接产生联系。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"桥接模式（Bridge Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-bridge.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>桥接模式(Bridge Pattern)：</strong>将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种<em>对象结构型模式</em>，又称为<em>柄体(Handle and Body)模式</em>或<em>接口(Interface)模式</em>。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象化角色</span></div><div class=\"line\"><span class=\"comment\">// 抽象化给出的定义，并保存一个对实现化对象的引用。</span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 对实现化对象的引用 */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> $imp;</div><div class=\"line\">    <span class=\"comment\">// 某操作方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;imp-&gt;operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 修正抽象化角色</span></div><div class=\"line\"><span class=\"comment\">// 扩展抽象化角色，改变和修正父类对抽象化的定义。</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Implementor $imp)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;imp = $imp;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 操作方法在修正抽象化角色中的实现</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'RefinedAbstraction operation  '</span>;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;imp-&gt;operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现化角色</span></div><div class=\"line\"><span class=\"comment\">// 给出实现化角色的接口，但不给出具体的实现。</span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 操作方法的实现化声明</span></div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationImp</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体化角色A</span></div><div class=\"line\"><span class=\"comment\">// 给出实现化角色接口的具体实现</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 操作方法的实现化实现</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationImp</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Concrete implementor A operation &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体化角色B</span></div><div class=\"line\"><span class=\"comment\">// 给出实现化角色接口的具体实现</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 操作方法的实现化实现</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationImp</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Concrete implementor B operation &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $abstraction = <span class=\"keyword\">new</span> RefinedAbstraction(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">        $abstraction-&gt;operation();</div><div class=\"line\"></div><div class=\"line\">        $abstraction = <span class=\"keyword\">new</span> RefinedAbstraction(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">        $abstraction-&gt;operation();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>理解桥接模式，重点需要理解如何将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化。</p>\n<ul>\n<li><strong>抽象化：</strong>抽象化就是忽略一些信息，把不同的实体当作同样的实体对待。在面向对象中，将对象的共同性质抽取出来形成类的过程即为抽象化的过程。</li>\n<li><strong>实现化：</strong>针对抽象化给出的具体实现，就是实现化，抽象化与实现化是一对互逆的概念，实现化产生的对象比抽象化更具体，是对抽象化事物的进一步具体化的产物。</li>\n<li><strong>脱耦：</strong>脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，将两个角色之间的继承关系改为关联关系。桥接模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而不是继承关系，从而使两者可以相对独立地变化，这就是桥接模式的用意。</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>桥接模式的优点:</p>\n<p>分离抽象接口及其实现部分。</p>\n<ol>\n<li>桥接模式有时类似于多继承方案，但是多继承方案违背了类的单一职责原则（即一个类只有一个变化的原因），复用性比较差，而且多继承结构中类的个数非常庞大，桥接模式是比多继承方案更好的解决方法。</li>\n<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</li>\n<li>实现细节对客户透明，可以对用户隐藏实现细节。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>桥接模式的缺点:</p>\n<ol>\n<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用桥接模式：</p>\n<ol>\n<li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>\n<li>抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。</li>\n<li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>\n<li>虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。</li>\n<li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>桥接模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>\n<li>桥接模式包含如下四个角色：抽象类中定义了一个实现类接口类型的对象并可以维护该对象；扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>\n<li>在桥接模式中，抽象化(Abstraction)与实现化(Implementation)脱耦，它们可以沿着各自的维度独立变化。</li>\n<li>桥接模式的主要优点是分离抽象接口及其实现部分，是比多继承方案更好的解决方法，桥接模式还提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，实现细节对客户透明，可以对用户隐藏实现细节；其主要缺点是增加系统的理解与设计难度，且识别出系统中两个独立变化的维度并不是一件容易的事情。</li>\n<li>桥接模式适用情况包括：需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系；抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响；一个类存在两个独立变化的维度，且这两个维度都需要进行扩展；设计要求需要独立管理抽象化角色和具体化角色；不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"装饰模式（Decorator Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-decorator.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>装饰模式(Decorator Pattern)：</strong>动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为<em>包装器(Wrapper)</em>，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象构件角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 装饰角色</span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span>  $_component;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_component = $component;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_component-&gt;operation();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 具体装饰类A</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct($component);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::operation(); <span class=\"comment\">// 调用装饰类的操作</span></div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedOperationA(); <span class=\"comment\">// 新增加的操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 新增加的操作A，即装饰上的功能</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addedOperationA</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Add Operation A &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体装饰类B</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct($component);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::operation();</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedOperationB();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 新增加的操作B，即装饰上的功能</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addedOperationB</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Add Operation B &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 具体构件</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Concrete Component operation &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $component = <span class=\"keyword\">new</span> ConcreteComponent();</div><div class=\"line\">        $decoratorA = <span class=\"keyword\">new</span> ConcreteDecoratorA($component);</div><div class=\"line\">        $decoratorB = <span class=\"keyword\">new</span> ConcreteDecoratorB($decoratorA);</div><div class=\"line\"> </div><div class=\"line\">        $decoratorA-&gt;operation();</div><div class=\"line\">        $decoratorB-&gt;operation();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><ol>\n<li>与继承关系相比，关联关系的主要优势在于不会破坏类的封装性，而且继承是一种耦合度较大的静态关系，无法在程序运行时动态扩展。在软件开发阶段，关联关系虽然不会比继承关系减少编码量，但是到了软件维护阶段，由于关联关系使系统具有较好的松耦合性，因此使得系统更加容易维护。当然，关联关系的缺点是比继承关系要创建更多的对象。</li>\n<li>使用装饰模式来实现扩展比继承更加灵活，它以对客户透明的方式动态地给一个对象附加更多的责任。装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展。</li>\n</ol>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>装饰模式的优点:</p>\n<ol>\n<li>装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活性。</li>\n<li>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的装饰器，从而实现不同的行为。</li>\n<li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</li>\n<li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>装饰模式的缺点:</p>\n<ol>\n<li>使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，同时还将产生很多具体装饰类。这些装饰类和小对象的产生将增加系统的复杂度，加大学习与理解的难度。</li>\n<li>这种比继承更加灵活机动的特性，也同时意味着装饰模式比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用装饰模式：</p>\n<ol>\n<li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li>\n<li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。</li>\n<li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类定义不能继承（如final类）.</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模式。</li>\n<li>装饰模式包含四个角色：抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）； 抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>\n<li>使用装饰模式来实现扩展比继承更加灵活，它以对客户透明的方式动 态地给一个对象附加更多的责任。装饰模式可以在不需要创造更多子 类的情况下，将对象的功能加以扩展。</li>\n<li>装饰模式的主要优点在于可以提供比继承更多的灵活性，可以通过一种动态的 方式来扩展一个对象的功能，并通过使用不同的具体装饰类以及这些装饰类的 排列组合，可以创造出很多不同行为的组合，而且具体构件类与具体装饰类可 以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类；其主要缺 点在于使用装饰模式进行系统设计时将产生很多小对象，而且装饰模式比继承 更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需 要逐级排查，较为烦琐。</li>\n<li>装饰模式适用情况包括：在不影响其他对象的情况下，以动态、透明的方式给 单个对象添加职责；需要动态地给一个对象增加功能，这些功能也可以动态地 被撤销；当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展 和维护时。</li>\n<li>装饰模式可分为透明装饰模式和半透明装饰模式：在透明装饰模式中，要求客 户端完全针对抽象编程，装饰模式的透明性要求客户端程序不应该声明具体构 件类型和具体装饰类型，而应该全部声明为抽象构件类型；半透明装饰模式允 许用户在客户端声明具体装饰者类型的对象，调用在具体装饰者中新增的方法。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"观察者模式（Observer Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-observer.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>观察者模式(Observer Pattern)：</strong>定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做<em>发布-订阅（Publish/Subscribe）模式</em>、<em>模型-视图（Model/View）模式</em>、<em>源-监听器（Source/Listener）模式</em>或<em>从属者（Dependents）模式</em>。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象目标角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 增加一个新的观察者对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Observer $observer</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除一个已注册过的观察者对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Observer $observer</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $observer)</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 通知所有注册过的观察者对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体目标角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_observers;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_observers = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 增加一个新的观察者对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Observer $observer</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_push(<span class=\"keyword\">$this</span>-&gt;_observers, $observer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除一个已注册过的观察者对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Observer $observer</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span><span class=\"params\">(Observer $observer)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $index = array_search($observer, <span class=\"keyword\">$this</span>-&gt;_observers);</div><div class=\"line\">        <span class=\"keyword\">if</span> ($index === <span class=\"keyword\">FALSE</span> || ! array_key_exists($index, <span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_observers[$index]);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">TRUE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 通知所有注册过的观察者对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!is_array(<span class=\"keyword\">$this</span>-&gt;_observers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_observers <span class=\"keyword\">as</span> $observer) &#123;</div><div class=\"line\">            $observer-&gt;update();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">TRUE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 抽象观察者角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 观察者的名称*/</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = $name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/* 更新方法 */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Observer'</span>, <span class=\"keyword\">$this</span>-&gt;_name, <span class=\"string\">' has notified.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $subject = <span class=\"keyword\">new</span> ConcreteSubject();</div><div class=\"line\">        <span class=\"comment\">/* 添加第一个观察者 */</span></div><div class=\"line\">        $observer1 = <span class=\"keyword\">new</span> ConcreteObserver(<span class=\"string\">'Martin'</span>);</div><div class=\"line\">        $subject-&gt;attach($observer1);</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br /&gt; The First notify:&lt;br /&gt;'</span>;</div><div class=\"line\">        $subject-&gt;notifyObservers();</div><div class=\"line\">        <span class=\"comment\">/* 添加第二个观察者 */</span></div><div class=\"line\">        $observer2 = <span class=\"keyword\">new</span> ConcreteObserver(<span class=\"string\">'woophp'</span>);</div><div class=\"line\">        $subject-&gt;attach($observer2);</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br /&gt; The Second notify:&lt;br /&gt;'</span>;</div><div class=\"line\">        $subject-&gt;notifyObservers();</div><div class=\"line\">        <span class=\"comment\">/* 删除第一个观察者 */</span></div><div class=\"line\">        $subject-&gt;detach($observer1);</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br /&gt; The Third notify:&lt;br /&gt;'</span>;</div><div class=\"line\">        $subject-&gt;notifyObservers();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><ul>\n<li>观察者模式描述了如何建立对象与对象之间的依赖关系，如何构造满足这种需求的系统。</li>\n<li>这一模式中的关键对象是观察目标和观察者，一个目标可以有任意数目的与之相依赖的观察者，一旦目标的状态发生改变，所有的观察者都将得到通知。</li>\n<li>作为对这个通知的响应，每个观察者都将即时更新自己的状态，以与目标状态同步，这种交互也称为发布-订阅(publishsubscribe)。目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接收通</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>观察者模式的优点：</p>\n<ol>\n<li>观察者模式可以实现表示层和数据逻辑层的分离，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有各种各样不同的表示层作为具体观察者角色。</li>\n<li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。</li>\n<li>观察者模式支持广播通信。</li>\n<li>观察者模式符合“开闭原则”的要求。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>观察者模式的缺点：</p>\n<ol>\n<li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>\n<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>\n<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用观察者模式：</p>\n<ol>\n<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li>\n<li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li>\n<li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li>\n<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。观察者模式是一种对象行为型模式。</li>\n<li>观察者模式包含四个角色：目标又称为主题，它是指被观察的对象；具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；观察者将对观察目标的改变做出反应；在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>\n<li>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。</li>\n<li>观察者模式的主要优点在于可以实现表示层和数据逻辑层的分离，并在观察目标和观察者之间建立一个抽象的耦合，支持广播通信；其主要缺点在于如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间，而且如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>\n<li>观察者模式适用情况包括：一个抽象模型有两个方面，其中一个方面依赖于另一个方面；一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变；一个对象必须通知其他对象，而并不知道这些对象是谁；需要在系统中创建一个触发链。</li>\n<li>在JDK的java.util包中，提供了Observable类以及Observer接口，它们构成了Java语言对观察者模式的支持。<br>Next  Previous</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"状态模式（State Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-state.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>状态模式(State Pattern)：</strong>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象状态角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">State</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">(Context $context)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体状态角色A 单例类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 唯一的实例 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/* 静态工厂方法，返还此类的唯一实例 */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">(Context $context)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Concrete Sate A handle method&lt;br /&gt;'</span>;</div><div class=\"line\">        $context-&gt;setState(ConcreteStateB::getInstance());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体状态角色B 单例类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 唯一的实例 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/* 静态工厂方法，返还此类的唯一实例 */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">(Context $context)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Concrete Sate B handle method&lt;br /&gt;'</span>;</div><div class=\"line\">        $context-&gt;setState(ConcreteStateA::getInstance());</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 环境角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_state;</div><div class=\"line\">    <span class=\"comment\">// 默认为StateA</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_state = ConcreteStateA::getInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span><span class=\"params\">(State $state)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_state = $state;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_state-&gt;handle(<span class=\"keyword\">$this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">        $context-&gt;request();</div><div class=\"line\">        $context-&gt;request();</div><div class=\"line\">        $context-&gt;request();</div><div class=\"line\">        $context-&gt;request();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><ol>\n<li>状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。</li>\n<li>状态模式的关键是引入了一个抽象类来专门表示对象的状态，这个类我们叫做抽象状态类，而对象的每一种具体状态类都继承了该类，并在不同具体状态类中实现了不同状态的行为，包括各种状态之间的转换。</li>\n</ol>\n<p>在状态模式结构中需要理解环境类与抽象状态类的作用：</p>\n<ol>\n<li>环境类实际上就是拥有状态的对象，环境类有时候可以充当状态管理器(State Manager)的角色，可以在环境类中对状态进行切换操作。</li>\n<li>抽象状态类可以是抽象类，也可以是接口，不同状态类就是继承这个父类的不同子类，状态类的产生是由于环境类存在多个状态，同时还满足两个条件：这些状态经常需要切换，在不同的状态下对象的行为不同。因此可以将不同对象下的行为单独提取出来封装在具体的状态类中，使得环境类对象在其内部状态改变时可以改变它的行为，对象看起来似乎修改了它的类，而实际上是由于切换到不同的具体状态类实现的。由于环境类可以设置为任一具体状态类，因此它针对抽象状态类进行编程，在程序运行时可以将任一具体状态类的对象设置到环境类中，从而使得环境类可以改变内部状态，并且改变行为。</li>\n</ol>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>状态模式的优点：</p>\n<ol>\n<li>封装了转换规则。</li>\n<li>枚举可能的状态，在枚举状态之前需要确定状态种类。</li>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>状态模式的缺点：</p>\n<ol>\n<li>状态模式的使用必然会增加系统类和对象的个数。</li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li>\n<li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用状态模式：</p>\n<ol>\n<li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。</li>\n<li>代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，使客户类与类库之间的耦合增强。在这些条件语句中包含了对象的行为，而且这些条件对应于对象的各种状态。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象，状态模式是一种对象行为型模式。</li>\n<li>状态模式包含三个角色：环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>\n<li>状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。</li>\n<li>状态模式的主要优点在于封装了转换规则，并枚举可能的状态，它将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为，还可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数；其缺点在于使用状态模式会增加系统类和对象的个数，且状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，对于可以切换状态的状态模式不满足“开闭原则”的要求。</li>\n<li>状态模式适用情况包括：对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为；代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，使客户类与类库之间的耦合增强。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"命令模式（Command Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-command.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>命令模式(Command Pattern)：</strong>将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种<em>对象行为型模式</em>，其别名为<strong>动作(Action)模式</strong>或<strong>事务(Transaction)模式</strong>。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 命令角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 执行方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体命令角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_receiver;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Receiver $receiver)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_receiver = $receiver;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 执行方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_receiver-&gt;action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 接收者角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 接收者名称 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = $name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 行动方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;_name, <span class=\"string\">' do action.&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 请求者角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_command;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Command $command)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_command = $command;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_command-&gt;execute();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $receiver = <span class=\"keyword\">new</span> Receiver(<span class=\"string\">'woophp'</span>);</div><div class=\"line\">        $command = <span class=\"keyword\">new</span> ConcreteCommand($receiver);</div><div class=\"line\">        $invoker = <span class=\"keyword\">new</span> Invoker($command);</div><div class=\"line\">        $invoker-&gt;action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。</p>\n<ul>\n<li>每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。</li>\n<li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li>\n<li>命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li>\n<li>命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>命令模式的优点：</p>\n<ol>\n<li>降低系统的耦合度。</li>\n<li>新的命令可以很容易地加入到系统中。</li>\n<li>可以比较容易地设计一个命令队列和宏命令（组合命令）。</li>\n<li>可以方便地实现对请求的Undo和Redo。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>命令模式的缺点：</p>\n<ol>\n<li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用命令模式：</p>\n<ol>\n<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li>\n<li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li>\n<li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li>\n<li>系统需要将一组操作组合在一起，即支持宏命令。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>在命令模式中，将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>\n<li>命令模式包含四个角色：抽象命令类中声明了用于执行请求的<code>execute()</code>等方法，通过这些方法可以调用请求接收者的相关操作；具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>\n<li>令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li>\n<li>命令模式的主要优点在于降低系统的耦合度，增加新的命令很方便，而且可以比较容易地设计一个命令队列和宏命令，并方便地实现对请求的撤销和恢复；其主要缺点在于可能会导致某些系统有过多的具体命令类。</li>\n<li>命令模式适用情况包括：需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互；需要在不同的时间指定请求、将请求排队和执行请求；需要支持命令的撤销操作和恢复操作，需要将一组操作组合在一起，即支持宏命令。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"适配器模式（Adapter Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-adapter.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>适配器模式(Adapter Pattern)：</strong>将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为<em>包装器(Wrapper)</em>。适配器模式既可以作为<em>类结构型模式</em>，也可以作为<em>对象结构型模式</em>。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h2 id=\"类适配器模式\"><a href=\"#类适配器模式\" class=\"headerlink\" title=\"类适配器模式\"></a>类适配器模式</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 目标角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Target</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 源类也有的方法1</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod1</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 源类没有的方法2</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 源角色 适配者</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 源类含有的方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod1</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Adaptee sampleMethod1 &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 类适配器角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Target</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 源类中没有sampleMethod2方法，在此补充</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod2</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Adapter sampleMethod2 &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $adapter = <span class=\"keyword\">new</span> Adapter();</div><div class=\"line\">        $adapter-&gt;sampleMethod1();</div><div class=\"line\">        $adapter-&gt;sampleMethod2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h2 id=\"对象适配器模式\"><a href=\"#对象适配器模式\" class=\"headerlink\" title=\"对象适配器模式\"></a>对象适配器模式</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 目标角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Target</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 源类也有的方法1</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod1</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 源类没有的方法2</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 源角色 适配者</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 源类含有的方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod1</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Adaptee sampleMethod1 &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 类适配器角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Target</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_adaptee;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Adaptee $adaptee)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_adaptee = $adaptee;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 委派调用Adaptee的sampleMethod1方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod1</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_adaptee-&gt;sampleMethod1();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 源类中没有sampleMethod2方法，在此补充</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleMethod2</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Adapter sampleMethod2 &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $adaptee = <span class=\"keyword\">new</span> Adaptee();</div><div class=\"line\">        $adapter = <span class=\"keyword\">new</span> Adapter($adaptee);</div><div class=\"line\">        $adapter-&gt;sampleMethod1();</div><div class=\"line\">        $adapter-&gt;sampleMethod2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li>\n<li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li>\n<li>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li>\n</ol>\n<p><em>类适配器模式</em>还具有如下优点：<br>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。<br><em>对象适配器模式</em>还具有如下优点：<br>一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</p>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p><em>类适配器模式</em>的缺点如下：<br>对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。<br><em>对象适配器模式</em>的缺点如下：<br>与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用适配器模式：</p>\n<ol>\n<li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li>\n<li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>结构型模式描述如何将类或者对象结合在一起形成更大的结构。</li>\n<li>适配器模式用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>\n<li>适配器模式包含四个角色：目标抽象类定义客户要用的特定领域的接口；适配器类可以调用另一个接口，作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心；适配者类是被适配的角色，它定义了一个已经存在的接口，这个接口需要适配；在客户类中针对目标抽象类进行编程，调用在目标抽象类中定义的业务方法。</li>\n<li>在类适配器模式中，适配器类实现了目标抽象类接口并继承了适配者类，并在目标抽象类的实现方法中调用所继承的适配者类的方法；在对象适配器模式中，适配器类继承了目标抽象类并定义了一个适配者类的对象实例，在所继承的目标抽象类方法中调用适配者类的相应业务方法。</li>\n<li>适配器模式的主要优点是将目标类和适配者类解耦，增加了类的透明性和复用性，同时系统的灵活性和扩展性都非常好，更换适配器或者增加新的适配器都非常方便，符合“开闭原则”；类适配器模式的缺点是适配器类在很多编程语言中不能同时适配多个适配者类，对象适配器模式的缺点是很难置换适配者类的方法。</li>\n<li>适配器模式适用情况包括：系统需要使用现有的类，而这些类的接口不符合系统的需要；想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类一起工作。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"组合模式（Composite Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-composite.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>组合模式（Composite）：</strong>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使用户对单个对象和组合对象的使用具有一致性。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><h2 id=\"安全式的组合模式\"><a href=\"#安全式的组合模式\" class=\"headerlink\" title=\"安全式的组合模式\"></a>安全式的组合模式</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象组件角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 返回自己的实例</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComposite</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 示例方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 树枝组件角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">implements</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_composites;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_composites = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComposite</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 示例方法，调用各个子对象的operation方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Composite operation begin:&lt;br /&gt;'</span>;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_composites <span class=\"keyword\">as</span> $composite) &#123;</div><div class=\"line\">            $composite-&gt;operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Composite operation end:&lt;br /&gt;&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 添加一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_composites[] = $component;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 删除一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span> boolean  删除是否成功</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_composites <span class=\"keyword\">as</span> $key =&gt; $row) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($component == $row) &#123;</div><div class=\"line\">                <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_composites[$key]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">TRUE</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 聚集管理方法 返回所有的子对象</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChild</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_composites;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">implements</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = $name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Leaf operation '</span>, <span class=\"keyword\">$this</span>-&gt;_name, <span class=\"string\">'&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComposite</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $leaf1 = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">'first'</span>);</div><div class=\"line\">        $leaf2 = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">'second'</span>);</div><div class=\"line\"> </div><div class=\"line\">        $composite = <span class=\"keyword\">new</span> Composite();</div><div class=\"line\">        $composite-&gt;add($leaf1);</div><div class=\"line\">        $composite-&gt;add($leaf2);</div><div class=\"line\">        $composite-&gt;operation();</div><div class=\"line\"> </div><div class=\"line\">        $composite-&gt;remove($leaf2);</div><div class=\"line\">        $composite-&gt;operation();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h2 id=\"透明式的组合模式\"><a href=\"#透明式的组合模式\" class=\"headerlink\" title=\"透明式的组合模式\"></a>透明式的组合模式</h2><p>在<em>Composite</em>类里面声明所有的用来管理子类对象的方法。这样做的是好处是所有的组件类都有相同的接口。在客户端看来，树叶类和合成类对象的区别起码在接口层次上消失了，客户端可以同等的对待所有的对象。这就是<strong>透明式的组合模式</strong>。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象组件角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 返回自己的实例</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComposite</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 示例方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 添加一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(Component $component)</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 删除一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span> boolean  删除是否成功</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">(Component $component)</span></span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 返回所有的子对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChild</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 树枝组件角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">implements</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_composites;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_composites = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComposite</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 示例方法，调用各个子对象的operation方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Composite operation begin:&lt;br /&gt;'</span>;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_composites <span class=\"keyword\">as</span> $composite) &#123;</div><div class=\"line\">            $composite-&gt;operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Composite operation end:&lt;br /&gt;&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 添加一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_composites[] = $component;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 删除一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span> boolean  删除是否成功</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;_composites <span class=\"keyword\">as</span> $key =&gt; $row) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ($component == $row) &#123;</div><div class=\"line\">                <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_composites[$key]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">TRUE</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 聚集管理方法 返回所有的子对象</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChild</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_composites;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">implements</span> <span class=\"title\">Component</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = $name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Leaf operation '</span>, <span class=\"keyword\">$this</span>-&gt;_name, <span class=\"string\">'&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComposite</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 添加一个子对象,此处没有具体实现，仅返回一个FALSE</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 删除一个子对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> Component $component  子对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span> boolean  此处没有具体实现，仅返回一个FALSE</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">(Component $component)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 聚集管理方法 返回所有的子对象 此处没有具体实现，返回null</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChild</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $leaf1 = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">'first'</span>);</div><div class=\"line\">        $leaf2 = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">'second'</span>);</div><div class=\"line\"></div><div class=\"line\">        $composite = <span class=\"keyword\">new</span> Composite();</div><div class=\"line\">        $composite-&gt;add($leaf1);</div><div class=\"line\">        $composite-&gt;add($leaf2);</div><div class=\"line\">        $composite-&gt;operation();</div><div class=\"line\"></div><div class=\"line\">        $composite-&gt;remove($leaf2);</div><div class=\"line\">        $composite-&gt;operation();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>简化客户代码；</li>\n<li>使得更容易增加新类型的组件。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>使你的设计变得更加一般化，容易增加组件也会产生一些问题，那就是很难限制组合中的组件。</p>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><ol>\n<li>你想表示对象的部分-整体层次结构；</li>\n<li>你希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>","categories":["PHP"],"tags":[]},{"title":"代理模式（Proxy Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-proxy.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>代理模式(Proxy Pattern)：</strong>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做<em>Proxy</em>或<em>Surrogate</em>，它是一种对象结构型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象主题角色（Subject），定义了RealSubject和Proxy公用接口</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 真正的主题角色（RealSubject），定义了Proxy所代表的真实实体</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = $name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;_name . <span class=\"string\">'在吃饭&lt;br&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;_name . <span class=\"string\">'在跑步&lt;br&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 代理对象（Proxy）</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_realSubject = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(RealSubject $realSubject = null)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($realSubject)) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_realSubject = $realSubject;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_realSubject-&gt;say();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_realSubject-&gt;run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $rs = <span class=\"keyword\">new</span> RealSubject(<span class=\"string\">'张三'</span>);</div><div class=\"line\">        $proxy = <span class=\"keyword\">new</span> Proxy($rs);</div><div class=\"line\">        $proxy-&gt;say();</div><div class=\"line\">        $proxy-&gt;run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>代理模式的优点：</p>\n<ol>\n<li>代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。</li>\n<li>远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>\n<li>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>\n<li>保护代理可以控制对真实对象的使用权限。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>代理模式的缺点：</p>\n<ol>\n<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>\n<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>根据代理模式的使用目的，常见的代理模式有以下几种类型：</p>\n<ol>\n<li>远程(Remote)代理：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又叫做<em>大使(Ambassador)</em>。</li>\n<li>虚拟(Virtual)代理：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li>\n<li>Copy-on-Write代理：它是虚拟代理的一种，把复制（克隆）操作延迟到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。</li>\n<li>保护(Protect or Access)代理：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li>\n<li>缓冲(Cache)代理：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li>\n<li>防火墙(Firewall)代理：保护目标不让恶意用户接近。</li>\n<li>同步化(Synchronization)代理：使几个用户能够同时使用一个对象而没有冲突。</li>\n<li>智能引用(Smart Reference)代理：当一个对象被引用时，提供一些额外的操作，如将此对象被调用的次数记录下来等。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>在代理模式中，要求给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>\n<li>代理模式包含三个角色：抽象主题角色声明了真实主题和代理主题的共同接口；代理主题角色内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象；真实主题角色定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。</li>\n<li>代理模式的优点在于能够协调调用者和被调用者，在一定程度上降低了系统的耦合度；其缺点在于由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，并且实现代理模式需要额外的工作，有些代理模式的实现非常复杂。远程代理为一个位于不同的地址空间的对象提供一个本地的代表对象，它使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>\n<li>如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建，这个小对象称为虚拟代理。虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>\n<li>保护代理可以控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"策略模式（Strategy Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-strategy.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>策略模式(Strategy Pattern)：</strong>定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。</p>\n<p>策略模式是一种对象行为型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象策略角色，以接口实现</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体策略角色A</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'algorithmInterface A&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体策略角色B</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'algorithmInterface B&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体策略角色C</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyC</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'algorithmInterface C&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 环境角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/* 引用的策略 */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_strategy;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Strategy $strategy)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy = $strategy;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_strategy-&gt;algorithmInterface();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $strategyA = <span class=\"keyword\">new</span> ConcreteStrategyA();</div><div class=\"line\">        $context = <span class=\"keyword\">new</span> Context($strategyA);</div><div class=\"line\">        $context-&gt;contextInterface();</div><div class=\"line\"></div><div class=\"line\">        $strategyB = <span class=\"keyword\">new</span> ConcreteStrategyB();</div><div class=\"line\">        $context = <span class=\"keyword\">new</span> Context($strategyB);</div><div class=\"line\">        $context-&gt;contextInterface();</div><div class=\"line\"></div><div class=\"line\">        $strategyC = <span class=\"keyword\">new</span> ConcreteStrategyC();</div><div class=\"line\">        $context = <span class=\"keyword\">new</span> Context($strategyC);</div><div class=\"line\">        $context-&gt;contextInterface();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><ol>\n<li>策略模式是一个比较容易理解和使用的设计模式，策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。</li>\n<li>在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。</li>\n<li>策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中“退休”的方便，策略模式并不决定在何时使用何种算法，算法的选择由客户端来决定。这在一定程度上提高了系统的灵活性，但是客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，这也是策略模式的缺点之一，在一定程度上增加了客户端的使用难度。</li>\n</ol>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>策略模式的优点：</p>\n<ol>\n<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>\n<li>策略模式提供了管理相关的算法族的办法。</li>\n<li>策略模式提供了可以替换继承关系的办法。</li>\n<li>使用策略模式可以避免使用多重条件转移语句。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>策略模式的缺点：</p>\n<ol>\n<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>\n<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用策略模式：</p>\n<ul>\n<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>\n<li>一个系统需要动态地在几种算法中选择一种。</li>\n<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>\n<li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>在策略模式中定义了一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式。策略模式是一种对象行为型模式。</li>\n<li>策略模式包含三个角色：环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例；抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类；具体策略类实现了在抽象策略类中定义的算法。</li>\n<li>策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。</li>\n<li>策略模式主要优点在于对“开闭原则”的完美支持，在不修改原有系统的基础上可以更换算法或者增加新的算法，它很好地管理算法族，提高了代码的复用性，是一种替换继承，避免多重条件转移语句的实现方式；其缺点在于客户端必须知道所有的策略类，并理解其区别，同时在一定程度上增加了系统中类的个数，可能会存在很多策略类。</li>\n<li>策略模式适用情况包括：在一个系统里面有许多类，它们之间的区别仅在于它们的行为，使用策略模式可以动态地让一个对象在许多行为中选择一种行为；一个系统需要动态地在几种算法中选择一种；避免使用难以维护的多重条件选择语句；希望在具体策略类中封装算法和与相关的数据结构。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"中介者模式（Mediator Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-mediator.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>中介者模式(Mediator Pattern)</strong>定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象中介类</span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($message, $colleague)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 抽象同事类</span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_mediator = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($mediator)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_mediator = $mediator;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($message)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_mediators-&gt;send($message, <span class=\"keyword\">$this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">($message)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体中介类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_colleague1 = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_colleague2 = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($message, $colleague)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($colleague == <span class=\"keyword\">$this</span>-&gt;_colleague1) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_colleague1-&gt;notify($message);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_colleague2-&gt;notify($message);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span><span class=\"params\">($colleague1, $colleague2)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_colleague1 = $colleague1;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_colleague2 = $colleague2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体同事类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">($message)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Colleague1 Message is :\"</span>.$message.<span class=\"string\">\"&lt;br/&gt;\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体同事类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">($message)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Colleague2 Message is :\"</span>.$message.<span class=\"string\">\"&lt;br/&gt;\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> funciton main()</div><div class=\"line\">    &#123;</div><div class=\"line\">        $mediator = <span class=\"keyword\">new</span> ConcreteMediator();</div><div class=\"line\">        $c1 = <span class=\"keyword\">new</span> Colleague1($mediator);</div><div class=\"line\">        $c2 = <span class=\"keyword\">new</span> Colleague2($mediator);</div><div class=\"line\">        $mediator-&gt;set($c1, $c2);</div><div class=\"line\">        $c1-&gt;send(<span class=\"string\">'to c2 from c1'</span>);</div><div class=\"line\">        $c2-&gt;send(<span class=\"string\">'to c1 from c2'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>中介者模式可以使对象之间的关系数量急剧减少。</p>\n<p>中介者承担两方面的职责：</p>\n<ol>\n<li>中转作用（结构性）：通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。</li>\n<li>协调作用（行为性）：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。</li>\n</ol>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>中介者模式的优点：</p>\n<ol>\n<li>简化了对象之间的交互。</li>\n<li>将各同事解耦。</li>\n<li>减少子类生成。</li>\n<li>可以简化各同事类的设计和实现。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>中介者模式的缺点：</p>\n<ol>\n<li>在具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用中介者模式：</p>\n<ol>\n<li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li>\n<li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</li>\n<li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li>\n<li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</li>\n<li>中介者模式包含四个角色：抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；抽象同事类定义各同事的公有方法；具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li>\n<li>通过引入中介者对象，可以将系统的网状结构变成以中介者为中心的星形结构，中介者承担了中转作用和协调作用。中介者类是中介者模式的核心，它对整个系统进行控制和协调，简化了对象之间的交互，还可以对对象间的交互进行进一步的控制。</li>\n<li>中介者模式的主要优点在于简化了对象之间的交互，将各同事解耦，还可以减少子类生成，对于复杂的对象之间的交互，通过引入中介者，可以简化各同事类的设计和实现；中介者模式主要缺点在于具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>\n<li>中介者模式适用情况包括：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解；一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象；想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"单例模式（Singleton Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-singleton.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>单例模式(Singleton Pattern)：</strong>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为<em>单例类</em>，它提供全局访问的方法。</p>\n<p>单例模式的要点有三个：一是<em>某个类只能有一个实例</em>；二是<em>它必须自行创建这个实例</em>；三是<em>它必须自行向整个系统提供这个实例</em>。单例模式是一种对象创建型模式。单例模式又名<em>单件模式</em>或<em>单态模式</em>。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单例类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 静态成品变量 保存全局实例</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_instance = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 私有化默认构造方法，保证外界无法直接实例化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 静态工厂方法，返还此类的唯一实例</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">self</span>::$_instance)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_instance = <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 防止用户克隆实例</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'Clone is not allowed.'</span> . E_USER_ERROR);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 测试用方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'Singleton Test!'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $instance = Singleton::getInstance();</div><div class=\"line\">        $instance-&gt;test();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——Singleton。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p>\n<p>在单例模式的实现过程中，需要注意如下三点：</p>\n<ol>\n<li>单例类的构造函数为私有；</li>\n<li>提供一个自身的静态私有成员变量；</li>\n<li>提供一个公有的静态工厂方法。</li>\n</ol>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。</li>\n<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li>\n<li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ol>\n<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li>\n<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li>\n<li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用单例模式：</p>\n<ol>\n<li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li>\n<li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li>\n<li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</li>\n<li>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</li>\n<li>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过<code>new</code>关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</li>\n<li>单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。</li>\n<li>单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"建造者模式（Builder Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-builder.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>造者模式(Builder Pattern)：</strong>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为<em>生成器模式</em>。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 产品角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span></div><div class=\"line\">&#123;　　　　　　　　　　　　　　　　　　　　　　　　　　</div><div class=\"line\">    <span class=\"comment\">// 产品的组成部分集合</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_parts;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_parts = <span class=\"keyword\">array</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">($part)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> array_push(<span class=\"keyword\">$this</span>-&gt;_parts, $part);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"the product include:\"</span>;</div><div class=\"line\">        array_map(<span class=\"string\">'printf'</span>, <span class=\"keyword\">$this</span>-&gt;_parts);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 抽象建造者 </span></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 产品零件构造方法1</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPart1</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 产品零件构造方法2</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPart2</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 产品返还方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体建造者</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_product;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_product = <span class=\"keyword\">new</span> Product();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPart1</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_product-&gt;add(<span class=\"string\">\"Part1\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPart2</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_product-&gt;add(<span class=\"string\">\"Part2\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 导演者</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Builder $builder)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $builder-&gt;buildPart1();</div><div class=\"line\">        $builder-&gt;buildPart2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $buidler = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">        $director = <span class=\"keyword\">new</span> Director($buidler);</div><div class=\"line\">        $product = $buidler-&gt;getResult();</div><div class=\"line\">        $product-&gt;show();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>抽象建造者类中定义了产品的创建方法和返回方法;</p>\n<p>建造者模式的结构中还引入了一个指挥者类Director，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p>\n<p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>\n<li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象 。</li>\n<li>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li>\n<li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ol>\n<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li>\n<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用建造者模式：</p>\n<ol>\n<li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li>\n<li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li>\n<li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。</li>\n<li>建造者模式包含如下四个角色：抽象建造者为创建一个产品对象的各个部件指定抽象接口；具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；产品角色是被构建的复杂对象，包含多个组成部件；指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>\n<li>在建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>\n<li>建造者模式的主要优点在于客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象，每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，符合“开闭原则”，还可以更加精细地控制产品的创建过程；其主要缺点在于由于建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，因此其使用范围受到一定的限制，如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li>\n<li>建造者模式适用情况包括：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；需要生成的产品对象的属性相互依赖，需要指定其生成顺序；对象的创建过程独立于创建该对象的类；隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同类型的产品。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"抽象工厂模式（Abstract Factory Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-abstract-factory.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>抽象工厂模式(Abstract Factory Pattern)</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为<em>Kit模式</em>，属于对象创建型模式。</p>\n<blockquote>\n<p><strong>产品等级结构：</strong>产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。<br><strong>产品族：</strong>在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</p>\n</blockquote>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象工厂</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建等级结构为A的产品的工厂方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProductA</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"comment\">// 创建等级结构为B的产品的工厂方法</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProductB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体工厂1</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProductA</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProductB</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体工厂2</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProductA</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProductB</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 抽象产品A</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractProductA</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 取得产品名</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 抽象产品B</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractProductB</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 取得产品名</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 具体产品Ａ1</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA1</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractProductA</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = <span class=\"string\">'product A1'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体产品Ａ2</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA2</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractProductA</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = <span class=\"string\">'product A2'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 具体产品B1</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB1</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractProductB</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = <span class=\"string\">'product B1'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体产品B2</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB2</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_name = <span class=\"string\">'product B2'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Main program.</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>::run(<span class=\"keyword\">new</span> ConcreteFactory1());</div><div class=\"line\">        <span class=\"keyword\">self</span>::run(<span class=\"keyword\">new</span> ConcreteFactory2());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 调用工厂实例生成产品，输出产品名</div><div class=\"line\">     * <span class=\"doctag\">@param</span>   $factory    AbstractFactory     工厂实例</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">(AbstractFactory $factory)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $productA = $factory-&gt;createProductA();</div><div class=\"line\">        $productB = $factory-&gt;createProductB();</div><div class=\"line\">        <span class=\"keyword\">echo</span> $productA-&gt;getName(), <span class=\"string\">'&lt;br /&gt;'</span>;</div><div class=\"line\">        <span class=\"keyword\">echo</span> $productB-&gt;getName(), <span class=\"string\">'&lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><ol>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>\n<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</li>\n</ol>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。</li>\n<li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li>\n<li>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ol>\n<li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li>\n<li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用抽象工厂模式：</p>\n<ol>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</li>\n<li>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li>\n<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li>\n<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li>\n<li>抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。</li>\n<li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li>\n<li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"工厂方法模式（Factory Method Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-factory-method.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>工厂方法模式(Factory Method Pattern)</strong>又称为<em>工厂模式</em>，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象工厂角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Factory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体工厂角色 可多个A B C...</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Factory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 工厂方法 返回具体 产品</div><div class=\"line\">     * <span class=\"doctag\">@return</span> ConcreteProduct</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoryMethod</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 抽象产品角色</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;                                                                                    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体产品角色 可多个 A B C...</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 接口方法实现 输出特定字符串</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'ConcreteProduct &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $fc = <span class=\"keyword\">new</span> ConcreteFactory();</div><div class=\"line\">        $product = $fc-&gt;factoryMethod();</div><div class=\"line\">        $product-&gt;operation();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Client::main();</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得<em>工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品</em>。</p>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li>\n<li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li>\n<li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而<em>只要添加一个具体工厂和具体产品</em>就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ol>\n<li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li>\n<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用工厂方法模式：</p>\n<ol>\n<li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</li>\n<li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li>\n<li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>工厂方法模式又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li>\n<li>工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。</li>\n<li>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li>\n<li>工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</li>\n<li>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"简单工厂模式（Simple Factory Pattern）","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-simple-factory.html","content":"<h1 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h1><p><strong>简单工厂模式(Simple Factory Pattern)</strong>：又称为<em>静态工厂方法(Static Factory Method)模式</em>，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h1 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</span></div><div class=\"line\"><span class=\"comment\">// 具体产品角色A</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProductA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//接口方法实现 输出特定字符串</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'ConcreteProductA &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 具体产品角色B</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProductB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 接口方法实现 输出特定字符串</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'ConcreteProductB &lt;br /&gt;'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 工厂角色负责实现创建所有实例的内部逻辑</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">($arg)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'A'</span> == $arg) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA();</div><div class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (<span class=\"string\">'B'</span> == $arg) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\">Factory::create(<span class=\"string\">'A'</span>);</div><div class=\"line\">Factory::create(<span class=\"string\">'B'</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"模式分析\"><a href=\"#模式分析\" class=\"headerlink\" title=\"模式分析\"></a>模式分析</h1><ul>\n<li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li>\n<li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。</li>\n<li>简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li>\n<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ol>\n<li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。</li>\n<li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li>\n<li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</li>\n</ol>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ol>\n<li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li>\n<li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li>\n<li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</li>\n<li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</li>\n</ol>\n<h1 id=\"适用环境\"><a href=\"#适用环境\" class=\"headerlink\" title=\"适用环境\"></a>适用环境</h1><p>在以下情况下可以使用简单工厂模式：</p>\n<ol>\n<li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li>\n<li>客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。</li>\n<li>简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li>\n<li>简单工厂模式包含三个角色：<em>工厂角色</em>负责实现创建所有实例的内部逻辑；<em>抽象产品角色</em>是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；<em>具体产品角色</em>是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n<li>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。</li>\n<li>简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。</li>\n</ol>\n","categories":["PHP"],"tags":[]},{"title":"UML类图介绍","url":"http://blog.wuzhiwei.cn/2017/04/18/uml-class-diagram.html","content":"<p><strong>UML类图</strong>是一种结构图，用于描述一个系统的静态结构。类图以反映类结构和类之间关系为目的，用以描述软件系统的结构，是一种静态建模方法。<em>类图中的类，与面向对象语言中的类的概念是对应的</em>。</p>\n<h1 id=\"类结构\"><a href=\"#类结构\" class=\"headerlink\" title=\"类结构\"></a>类结构</h1><p>在类的UML图中，使用长方形描述一个类的主要结构，长方形垂直地分为三层，分别放置类的<em>名称</em>、<em>属性</em>和<em>方法</em>。</p>\n<p><img src=\"/pic/structure.png\" alt=\"类结构图\"></p>\n<p>其中，一般类的类名用正常<strong>字体粗体</strong>表示（如上图）；抽象类名用<strong><em>斜体字粗体</em></strong>，如<strong><em>User</em></strong>；接口则需在上方加上<code>&lt;&lt;interface&gt;&gt;</code>。</p>\n<p>属性和方法都需要标注可见性符号，<code>+</code>代表<code>public</code>，<code>#</code>代表<code>protected</code>，<code>-</code>代表<code>private</code>。</p>\n<p>另外，还可以用冒号<code>:</code>表明属性的类型和方法的返回类型，如<code>+$name:string</code>、<code>+getName():string</code>。<em>当然，类型说明并非必须</em>。</p>\n<h1 id=\"类关系\"><a href=\"#类关系\" class=\"headerlink\" title=\"类关系\"></a>类关系</h1><p>类与类之间的关系主要有六种：<em>继承</em>、<em>实现</em>、<em>组合</em>、<em>聚合</em>、<em>关联</em>和<em>依赖</em>，这六种关系的箭头表示如：</p>\n<p><img src=\"/pic/arrow.png\" alt=\"类关系\"></p>\n<p>六种类关系中，<em>组合</em>、<em>聚合</em>、<em>关联</em>这三种类关系的代码结构一样，都是<strong>用属性来保存另一个类的引用</strong>，所以要通过内容间的关系来区别。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p><strong>继承关系</strong>也称<em>泛化关系（Generalization）</em>，用于描述父类与子类之间的关系。父类又称作基类，子类又称作派生类。</p>\n<p>继承关系中，子类继承父类的所有功能，父类所具有的属性、方法，子类应该都有。子类中除了与父类一致的信息以外，还包括额外的信息。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><strong>实现关系（Implementation）</strong>，主要<em>用来规定接口和实现类的关系</em>。</p>\n<p>接口（包括抽象类）是方法的集合，在实现关系中，类实现了接口，类中的方法实现了接口声明的所有方法。</p>\n<h2 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h2><p><strong>组合关系（Composition）</strong>是整体与部分的关系，但是<em>整体与部分不可以分开</em>。</p>\n<p>组合关系表示类之间整体与部分的关系，整体和部分有一致的生存期。一旦整体对象不存在，部分对象也将不存在，是<em>同生共死</em>的关系。</p>\n<h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h2><p><strong>聚合关系（Aggregation）</strong>也是整体和部分的关系，<em>整体与部分可以分开</em>。</p>\n<p>聚合关系也表示类之间整体与部分的关系，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。</p>\n<h2 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h2><p><strong>关联关系（Association）</strong>，表示一个类的<em>属性保存了对另一个类的一个实例（或多个实例）的引用</em>。</p>\n<p>关联关系是类与类之间最常用的一种关系，表示一类对象与另一类对象之间有联系。<em>组合、聚合也属于关联关系</em>，只是关联关系的类间关系比其他两种要弱。</p>\n<p>关联关系有四种：双向关联、单向关联、自关联、多重数关联。在UML图中，双向的关联可以有两个箭头或者没有箭头，单向的关联或自关联有一个箭头。</p>\n<p>在多重性关系中，可以直接在关联直线上增加一个数字，表示与之对应的另一个类的对象的个数。</p>\n<ul>\n<li>1..1：仅一个</li>\n<li>0..*：零个或多个</li>\n<li>1..*：一个或多个</li>\n<li>0..1：零个或一个</li>\n<li>m..n：最少m、最多n个（m&lt;=n）</li>\n</ul>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p><strong>依赖关系（Dependence）：</strong>假设A类的变化引起了B类的变化，则说名B类<em>依赖于</em>A类。</p>\n<p>大多数情况下，<em>依赖关系体现在某个类的方法使用另一个类的对象作为参数</em>。</p>\n<p>依赖关系是一种“使用”关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这六种类关系中，组合、聚合和关联的代码结构一样，可以从关系的强弱来理解，各类关系从强到弱依次是：继承→实现→组合→聚合→关联→依赖。如下是完整的一张UML关系图：</p>\n<p><img src=\"/pic/whole.png\" alt=\"UML关系图\"></p>\n","categories":["UML"],"tags":[]},{"title":"PHP设计模式——简介","url":"http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern.html","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>在我们的编程过程中，所遇到的大部分问题其实都已经被其他程序员碰到过，并一再的处理了；不论是使用什么编程语言。<strong>设计模式</strong>提取了共同问题，定义了经过测试的解决方案，并描述了可能的结果。</p>\n<p><strong>设计模式</strong>是一些可以<em>在项目中重复使用的解决方案</em>，是<em>解决一般性问题的通用方法</em>。</p>\n<p>通俗来说，设计模式就是一些编程的套路。</p>\n<p>面向对象的原则是<strong>“组合优于继承”</strong>，因为组合可以以多种方式动态的处理任务。虽然对象的组合会导致代码的可读性下降，但会让系统更加灵活，复用性更高。</p>\n<p><strong>设计模式</strong>是很多前辈花费大量精力总结的经验，是经过检验的高效的一系列对象组合方式；可以通过不同的语言来实现，下面特整理了一份PHP语言的设计模式实现，共12种经典的设计模式：</p>\n<h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><p><strong>创建型模式(Creational Pattern)</strong>对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p>\n<p>创建型模式<em>在创建什么(What)</em>，<em>由谁创建(Who)</em>，<em>何时创建(When)</em>等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p>\n<ol>\n<li><a href=\"php-design-pattern-simple-factory.html\">简单工厂模式（Simple Factory Pattern）</a></li>\n<li><a href=\"php-design-pattern-factory-method.html\">工厂方法模式（Factory Method Pattern）</a></li>\n<li><a href=\"php-design-pattern-abstract-factory.html\">抽象工厂模式（Abstract Factory Pattern）</a></li>\n<li><a href=\"php-design-pattern-builder.html\">建造者模式（Builder Pattern）</a></li>\n<li><a href=\"php-design-pattern-singleton.html\">单例模式（Singleton Pattern）</a></li>\n</ol>\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><p><strong>结构型模式(Structural Pattern)</strong>描述如何将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。</p>\n<p>结构型模式可以分为<em>类结构型模式</em>和<em>对象结构型模式</em>：</p>\n<ul>\n<li>类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系。</li>\n<li>对象结构型模式关心类与对象的组合，通过关联关系使得在一 个类中定义另一个类的实例对象，然后通过该对象调用其方法。根据“合成复用原则”，在系统中尽量使用关联关系来替代继 承关系，因此大部分结构型模式都是对象结构型模式。</li>\n</ul>\n<ol>\n<li><a href=\"php-design-pattern-adapter.html\">适配器模式（Adapter Pattern）</a></li>\n<li><a href=\"php-design-pattern-bridge.html\">桥接模式（Bridge Pattern）</a></li>\n<li><a href=\"php-design-pattern-composite.html\">组合模式（Composite Pattern）</a></li>\n<li><a href=\"php-design-pattern-decorator.html\">装饰模式（Decorator Pattern）</a></li>\n<li><a href=\"php-design-pattern-facade.html\">外观模式（Facade Pattern）</a></li>\n<li><a href=\"php-design-pattern-flyweight.html\">享元模式（Flyweight Pattern）</a></li>\n<li><a href=\"php-design-pattern-proxy.html\">代理模式（Proxy Pattern）</a></li>\n</ol>\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><p><strong>行为型模式(Behavioral Pattern)</strong>是对在不同的对象之间划分责任和算法的抽象化。</p>\n<p>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p>\n<p>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</p>\n<p>行为型模式分为<em>类行为型模式</em>和<em>对象行为型模式</em>两种：</p>\n<ul>\n<li>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li>\n<li>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。</li>\n</ul>\n<ol>\n<li><a href=\"php-design-pattern-command.html\">命令模式（Command Pattern）</a></li>\n<li><a href=\"php-design-pattern-mediator.html\">中介者模式（Mediator Pattern）</a></li>\n<li><a href=\"php-design-pattern-observer.html\">观察者模式（Observer Pattern）</a></li>\n<li><a href=\"php-design-pattern-state.html\">状态模式（State Pattern）</a></li>\n<li><a href=\"php-design-pattern-strategy.html\">策略模式（Strategy Pattern）</a></li>\n</ol>\n<p>设计模式的<strong>宗旨就是：重用</strong>；在面向对象中，<em>类是用于生成对象的代码模版</em>，而<em>设计模式是用于解决共性问题的代码模版</em>。遵循这样的模板，我们可以设快速地设计出优秀的代码。</p>\n<blockquote>\n<p>注意，设计模式只是模板，不是具体的代码。它是为了代码复用，增加可维护性。</p>\n</blockquote>\n<h1 id=\"设计基础\"><a href=\"#设计基础\" class=\"headerlink\" title=\"设计基础\"></a>设计基础</h1><p>在学习设计模式之前，有几个概念应该深入理解。<br>假设有一个这样的类：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $name = <span class=\"string\">'Human'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"变量保存对象\"><a href=\"#变量保存对象\" class=\"headerlink\" title=\"变量保存对象\"></a>变量保存对象</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$man = <span class=\"keyword\">new</span> Person(); <span class=\"comment\">// 变量不仅能保存整形数字、数组和字符串等；还可以保存对象。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $man-&gt;getName();</div></pre></td></tr></table></figure>\n<h2 id=\"传递对象参数\"><a href=\"#传递对象参数\" class=\"headerlink\" title=\"传递对象参数\"></a>传递对象参数</h2><p>如果另一个类用到了<code>Person</code>类的属性或方法，可以直接传进去：<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> funciton __construct($person)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> $person-&gt;getName();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 传递对象</span></div><div class=\"line\">$jack = <span class=\"keyword\">new</span> Student(<span class=\"keyword\">new</span> Person());</div></pre></td></tr></table></figure></p>\n<h2 id=\"限定传递参数的类型\"><a href=\"#限定传递参数的类型\" class=\"headerlink\" title=\"限定传递参数的类型\"></a>限定传递参数的类型</h2><p>在传递参数的时候，就限定参数的类型：<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Person $person)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> $person-&gt;getName();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 传递对象</span></div><div class=\"line\">$jack = <span class=\"keyword\">new</span> Student(<span class=\"keyword\">new</span> Person());</div></pre></td></tr></table></figure></p>\n<p>这样，传给<code>new Studen()</code>的参数必须是<code>Person</code>的实例。</p>\n<h2 id=\"用类属性保存对象\"><a href=\"#用类属性保存对象\" class=\"headerlink\" title=\"用类属性保存对象\"></a>用类属性保存对象</h2><p>一种经常用到的做法，是用一个类的属性保存对象或对象集合。<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Life</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $persons = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addPerson</span><span class=\"params\">(Person $person)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;persons[] = $person;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$cls = <span class=\"keyword\">new</span> Life();</div><div class=\"line\">$cls-&gt;addPerson(<span class=\"keyword\">new</span> Person());</div><div class=\"line\">$cls-&gt;addPerson(<span class=\"keyword\">new</span> Person());</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>面向对象的设计模式都是围绕上面的情形，做一些组合之后形成的。</p>\n</blockquote>\n<h1 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h1><p>设计模式有六大原则，这些原则是经过代码大神们不断总结的规律，目的是提高代码的复用性，降低耦合。</p>\n<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>1988年，勃兰特·梅耶（Bertrand Meyer）在他的著作《面向对象软件构造（Object Oriented Software Construction）》中提出了开闭原则（Open Close Principle），它的原文是这样：“Software entities should be open for extension,but closed for modification”。</p>\n<ul>\n<li><strong>意思：</strong>软件模块应该对扩展开放，对修改关闭。</li>\n<li><strong>举例：</strong>在程序需要进行新增功能的时候，不能去修改原有的代码，而是新增代码，实现一个热插拔的效果（<em>热插拔：灵活的去除或添加功能，不影响到原有的功能</em>）。</li>\n<li><strong>目的：</strong>为了使程序的扩展性好，易于维护和升级。</li>\n</ul>\n<h2 id=\"里氏代换原则\"><a href=\"#里氏代换原则\" class=\"headerlink\" title=\"里氏代换原则\"></a>里氏代换原则</h2><ul>\n<li><strong>意思：</strong>里氏代换原则（Liskov Substitution Principle）是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li>\n<li><strong>举例：</strong>球类，原本是一种体育用品，它的衍生类有篮球、足球、排球、羽毛球等等，如果衍生类替换了基类的原本方法，如把体育用品改成了食用品（那么软件单位的功能受到影响），就不符合里氏代换原则。</li>\n<li><strong>目的：</strong>对实现抽象化的具体步骤的规范。</li>\n</ul>\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><ul>\n<li><strong>意思：</strong>依赖倒转原则（Dependence Inversion Principle）即针对接口编程，而不是针对实现编程。</li>\n<li><strong>举例：</strong>以计算机系统为例,无论主板、CPU、内存、硬件都是在针对接口设计的，如果针对实现来设计，内存就要对应到针对某个品牌的主板，那么会出现换内存需要把主板也换掉的尴尬。</li>\n<li><strong>目的：</strong>降低模块间的耦合。</li>\n</ul>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><ul>\n<li><strong>意思：</strong>接口隔离原则（Interface Segregation Principle）即使用多个隔离的接口，比使用单个接口要好。</li>\n<li><strong>举例：</strong>比如：登录，注册时属于用户模块的两个接口，比写成一个接口好。</li>\n<li><strong>目的：</strong>提高程序设计灵活性。</li>\n</ul>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>迪米特法则（Demeter Principle）也称最少知道原则，1987年秋天由美国Northeastern University的Ian Holland提出，被UML的创始者之一Booch等普及。后来，因为在经典著作《 The Pragmatic Programmer》而广为人知。</p>\n<ul>\n<li><strong>意思：</strong>一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li>\n<li><strong>举例：</strong>一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。</li>\n<li><strong>目的：</strong>降低类之间的耦合，减少对其他类的依赖。</li>\n</ul>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>单一职责原则（ Single responsibility principle ）由罗伯特·C·马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中给出的。马丁表示此原则是基于汤姆·狄马克(Tom DeMarco)和Meilir Page-Jones的著作中的内聚性原则发展出的。</p>\n<ul>\n<li><strong>意思：</strong>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</li>\n<li><strong>举例：</strong>该原则意思简单到不需要举例！</li>\n<li><strong>目的：</strong>类的复杂性降低，可读性提高，可维护性提高。</li>\n</ul>\n","categories":["PHP"],"tags":[]},{"title":"学会冷静，也是一种智慧！","url":"http://blog.wuzhiwei.cn/2017/04/12/learn-to-be-calm.html","content":"<p>某人得一宝贝：紫砂壶，每夜都放在床头。一次失手将紫砂壶壶盖打翻到地上，惊醒后，甚恼。壶盖没了，留壶身何用？于是抓起壶扔到窗外。</p>\n<p>天明，发现壶盖掉在棉鞋上，无损。恨之，一脚把壶盖踩得粉碎。出门，见昨晚扔出窗外的茶壶，完好挂在树枝上……</p>\n<p>顿悟：有时，事情可以：<em>等一等！看一看！缓一缓！</em>很多事情不是你以为的那样！冲动是魔鬼！<strong>学会冷静，也是一种智慧！</strong></p>\n","categories":["随笔"],"tags":[]},{"title":"Hexo代码高亮","url":"http://blog.wuzhiwei.cn/2017/04/07/hexo-code-highlight.html","content":"<p>程序员博客会经常贴代码，并使其高亮显示。<em>Hexo</em>自带代码高亮功能。</p>\n<h1 id=\"写法格式\"><a href=\"#写法格式\" class=\"headerlink\" title=\"写法格式\"></a>写法格式</h1><p>``` + 语言名（如PHP）</p>\n<p>// 代码内容</p>\n<p>```</p>\n<h1 id=\"常用语言对应表\"><a href=\"#常用语言对应表\" class=\"headerlink\" title=\"常用语言对应表\"></a>常用语言对应表</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语言</th>\n<th style=\"text-align:left\">对应代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Bash</td>\n<td style=\"text-align:left\">bash, sh, zsh</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C#</td>\n<td style=\"text-align:left\">cs, csharp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C++</td>\n<td style=\"text-align:left\">cpp, c, cc, h, c++, h++, hpp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSS</td>\n<td style=\"text-align:left\">css</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DOS</td>\n<td style=\"text-align:left\">dos, bat, cmd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HTML, XML</td>\n<td style=\"text-align:left\">xml, html, xhtml, rss, atom, xjb, xsd, xsl, plist</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSON</td>\n<td style=\"text-align:left\">json</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java</td>\n<td style=\"text-align:left\">java, jsp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript</td>\n<td style=\"text-align:left\">javascript, js, jsx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Objective C</td>\n<td style=\"text-align:left\">objectivec, mm, objc, obj-c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PHP</td>\n<td style=\"text-align:left\">php, php3, php4, php5, php6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ruby</td>\n<td style=\"text-align:left\">ruby, rb, gemspec, podspec, thor, irb</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SQL</td>\n<td style=\"text-align:left\">sql</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Swift</td>\n<td style=\"text-align:left\">swift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VB.Net</td>\n<td style=\"text-align:left\">vbnet, vb</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"所有语言对应表\"><a href=\"#所有语言对应表\" class=\"headerlink\" title=\"所有语言对应表\"></a>所有语言对应表</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语言</th>\n<th style=\"text-align:left\">对应代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Zephir</td>\n<td style=\"text-align:left\">Zephir</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XQuery</td>\n<td style=\"text-align:left\">xpath, xq</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1C</td>\n<td style=\"text-align:left\">1c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Access logs</td>\n<td style=\"text-align:left\">accesslog</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ARM assembler</td>\n<td style=\"text-align:left\">armasm, arm</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AVR assembler</td>\n<td style=\"text-align:left\">avrasm</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ActionScript</td>\n<td style=\"text-align:left\">actionscript, as</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Apache</td>\n<td style=\"text-align:left\">apache, apacheconf</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleScript</td>\n<td style=\"text-align:left\">applescript, osascript</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AsciiDoc</td>\n<td style=\"text-align:left\">asciidoc, adoc</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AspectJ</td>\n<td style=\"text-align:left\">aspectj</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AutoHotkey</td>\n<td style=\"text-align:left\">autohotkey</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AutoIt</td>\n<td style=\"text-align:left\">autoit</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Axapta</td>\n<td style=\"text-align:left\">axapta</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Bash</td>\n<td style=\"text-align:left\">bash, sh, zsh</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Basic</td>\n<td style=\"text-align:left\">basic</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Brainfuck</td>\n<td style=\"text-align:left\">brainfuck, bf</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C#</td>\n<td style=\"text-align:left\">cs, csharp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C++</td>\n<td style=\"text-align:left\">cpp, c, cc, h, c++, h++, hpp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C/AL</td>\n<td style=\"text-align:left\">cal</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache Object Script</td>\n<td style=\"text-align:left\">cos, cls</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMake</td>\n<td style=\"text-align:left\">cmake, cmake.in</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSP</td>\n<td style=\"text-align:left\">csp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSS</td>\n<td style=\"text-align:left\">css</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cap’n Proto</td>\n<td style=\"text-align:left\">capnproto, capnp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Clojure</td>\n<td style=\"text-align:left\">clojure, clj</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CoffeeScript</td>\n<td style=\"text-align:left\">coffeescript, coffee, cson, iced</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Crmsh</td>\n<td style=\"text-align:left\">crmsh, crm, pcmk</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Crystal</td>\n<td style=\"text-align:left\">crystal, cr</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">D</td>\n<td style=\"text-align:left\">d</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DNS Zone file</td>\n<td style=\"text-align:left\">dns, zone, bind</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DOS</td>\n<td style=\"text-align:left\">dos, bat, cmd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dart</td>\n<td style=\"text-align:left\">dart</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Delphi</td>\n<td style=\"text-align:left\">delphi, dpr, dfm, pas, pascal, freepascal, lazarus, lpr, lfm</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Diff</td>\n<td style=\"text-align:left\">diff, patch</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Django</td>\n<td style=\"text-align:left\">django, jinja</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dockerfile</td>\n<td style=\"text-align:left\">dockerfile, docker</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DTS (Device Tree)</td>\n<td style=\"text-align:left\">dts</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Dust</td>\n<td style=\"text-align:left\">dust, dst</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Elixir</td>\n<td style=\"text-align:left\">elixir</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Elm</td>\n<td style=\"text-align:left\">elm</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Erlang</td>\n<td style=\"text-align:left\">erlang, erl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F#</td>\n<td style=\"text-align:left\">fsharp, fs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FIX</td>\n<td style=\"text-align:left\">fix</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Fortran</td>\n<td style=\"text-align:left\">fortran, f90, f95</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">G-Code</td>\n<td style=\"text-align:left\">gcode, nc</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gams</td>\n<td style=\"text-align:left\">gams, gms</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GAUSS</td>\n<td style=\"text-align:left\">gauss, gss</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gherkin</td>\n<td style=\"text-align:left\">gherkin</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Go</td>\n<td style=\"text-align:left\">go, golang</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Golo</td>\n<td style=\"text-align:left\">golo, gololang</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gradle</td>\n<td style=\"text-align:left\">gradle</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Groovy</td>\n<td style=\"text-align:left\">groovy</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HTML, XML</td>\n<td style=\"text-align:left\">xml, html, xhtml, rss, atom, xjb, xsd, xsl, plist</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HTTP</td>\n<td style=\"text-align:left\">http, https</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Haml</td>\n<td style=\"text-align:left\">haml</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Handlebars</td>\n<td style=\"text-align:left\">handlebars, hbs, html.hbs, html.handlebars</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Haskell</td>\n<td style=\"text-align:left\">haskell, hs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Haxe</td>\n<td style=\"text-align:left\">haxe, hx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ini</td>\n<td style=\"text-align:left\">ini</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inform7</td>\n<td style=\"text-align:left\">inform7, i7</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IRPF90</td>\n<td style=\"text-align:left\">irpf90</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSON</td>\n<td style=\"text-align:left\">json</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java</td>\n<td style=\"text-align:left\">java, jsp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JavaScript</td>\n<td style=\"text-align:left\">javascript, js, jsx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Lasso</td>\n<td style=\"text-align:left\">lasso, ls, lassoscript</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Less</td>\n<td style=\"text-align:left\">less</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Lisp</td>\n<td style=\"text-align:left\">lisp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LiveCode Server</td>\n<td style=\"text-align:left\">livecodeserver</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LiveScript</td>\n<td style=\"text-align:left\">livescript, ls</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Lua</td>\n<td style=\"text-align:left\">lua</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Makefile</td>\n<td style=\"text-align:left\">makefile, mk, mak</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Markdown</td>\n<td style=\"text-align:left\">markdown, md, mkdown, mkd</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Mathematica</td>\n<td style=\"text-align:left\">mathematica, mma</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Matlab</td>\n<td style=\"text-align:left\">matlab</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Maxima</td>\n<td style=\"text-align:left\">maxima</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Maya Embedded Language</td>\n<td style=\"text-align:left\">mel</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Mercury</td>\n<td style=\"text-align:left\">mercury</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Mizar</td>\n<td style=\"text-align:left\">mizar</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Mojolicious</td>\n<td style=\"text-align:left\">mojolicious</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Monkey</td>\n<td style=\"text-align:left\">monkey</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Moonscript</td>\n<td style=\"text-align:left\">moonscript, moon</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NSIS</td>\n<td style=\"text-align:left\">nsis</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Nginx</td>\n<td style=\"text-align:left\">nginx, nginxconf</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Nimrod</td>\n<td style=\"text-align:left\">nimrod, nim</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Nix</td>\n<td style=\"text-align:left\">nix</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OCaml</td>\n<td style=\"text-align:left\">ocaml, ml</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Objective C</td>\n<td style=\"text-align:left\">objectivec, mm, objc, obj-c</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OpenGL Shading Language</td>\n<td style=\"text-align:left\">glsl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OpenSCAD</td>\n<td style=\"text-align:left\">openscad, scad</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Oracle Rules Language</td>\n<td style=\"text-align:left\">ruleslanguage</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Oxygene</td>\n<td style=\"text-align:left\">oxygene</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PF</td>\n<td style=\"text-align:left\">pf, pf.conf</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PHP</td>\n<td style=\"text-align:left\">php, php3, php4, php5, php6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Parser3</td>\n<td style=\"text-align:left\">parser3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Perl</td>\n<td style=\"text-align:left\">perl, pl, pm</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PowerShell</td>\n<td style=\"text-align:left\">powershell, ps</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Processing</td>\n<td style=\"text-align:left\">processing</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Prolog</td>\n<td style=\"text-align:left\">prolog</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Protocol Buffers</td>\n<td style=\"text-align:left\">protobuf</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Puppet</td>\n<td style=\"text-align:left\">puppet, pp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Python</td>\n<td style=\"text-align:left\">python, py, gyp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Q</td>\n<td style=\"text-align:left\">k, kdb</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QML</td>\n<td style=\"text-align:left\">qml</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td style=\"text-align:left\">r</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RenderMan RIB</td>\n<td style=\"text-align:left\">rib</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RenderMan RSL</td>\n<td style=\"text-align:left\">rsl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Roboconf</td>\n<td style=\"text-align:left\">graph, instances</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ruby</td>\n<td style=\"text-align:left\">ruby, rb, gemspec, podspec, thor, irb</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Rust</td>\n<td style=\"text-align:left\">rust, rs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SCSS</td>\n<td style=\"text-align:left\">scss</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SQL</td>\n<td style=\"text-align:left\">sql</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">STEP Part 21</td>\n<td style=\"text-align:left\">p21, step, stp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scala</td>\n<td style=\"text-align:left\">scala</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scheme</td>\n<td style=\"text-align:left\">scheme</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Scilab</td>\n<td style=\"text-align:left\">scilab, sci</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Smali</td>\n<td style=\"text-align:left\">smali</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Smalltalk</td>\n<td style=\"text-align:left\">smalltalk, st</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Stan</td>\n<td style=\"text-align:left\">stan</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Stata</td>\n<td style=\"text-align:left\">stata</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Stylus</td>\n<td style=\"text-align:left\">stylus, styl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Swift</td>\n<td style=\"text-align:left\">swift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Tcl</td>\n<td style=\"text-align:left\">tcl, tk</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TeX</td>\n<td style=\"text-align:left\">tex</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Thrift</td>\n<td style=\"text-align:left\">thrift</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TP</td>\n<td style=\"text-align:left\">tp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Twig</td>\n<td style=\"text-align:left\">twig, craftcms</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TypeScript</td>\n<td style=\"text-align:left\">typescript, ts</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VB.Net</td>\n<td style=\"text-align:left\">vbnet, vb</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VBScript</td>\n<td style=\"text-align:left\">vbscript, vbs</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VHDL</td>\n<td style=\"text-align:left\">vhdl</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Vala</td>\n<td style=\"text-align:left\">vala</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Verilog</td>\n<td style=\"text-align:left\">verilog, v</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Vim Script</td>\n<td style=\"text-align:left\">vim</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x86 Assembly</td>\n<td style=\"text-align:left\">x86asm</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XL</td>\n<td style=\"text-align:left\">xl, tao</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XQuery</td>\n<td style=\"text-align:left\">xpath, xq</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Zephir</td>\n<td style=\"text-align:left\">zephir, zep</td>\n</tr>\n</tbody>\n</table>\n","categories":["Hexo"],"tags":[]},{"title":"HTTP协议——历史演变","url":"http://blog.wuzhiwei.cn/2017/04/06/introduction-to-http-protocol.html","content":"<p><strong>HTTP协议</strong>是<em>HyperText Transfer Protocol</em>（超文本传输协议）的缩写，用于从万维网（World Wide Web，简称WWW）服务器传输超文本到本地浏览器的传送协议。主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p>\n<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML文件、图片文件、查询结果等）。它的发展是<em>万维网协会</em>（World Wide Web Consortium）和<em>Internet工作小组IETF</em>（Internet Engineering Task Force）合作的结果，（他们）最终发布了一系列的<em>RFC</em>，RFC 1945定义了HTTP/1.0版本。其中最著名的就是RFC 2616。RFC 2616定义了今天普遍使用的一个版本——HTTP 1.1。</p>\n<h1 id=\"历史演变\"><a href=\"#历史演变\" class=\"headerlink\" title=\"历史演变\"></a>历史演变</h1><h2 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP/0.9\"></a>HTTP/0.9</h2><p>最早版本是<strong>1991年发布的0.9</strong>版。该版本极其简单，只有一个命令<code>GET</code>，如<code>GET /index.html</code>表示，TCP连接（connection）建立后，客户端向服务器请求（request）网页<em>index.html</em>。<strong>协议规定</strong>，服务器<em>只能回应HTML格式的字符串，不能回应别的格式</em>。服务器发送完毕，就关闭TCP连接。</p>\n<h2 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP/1.0\"></a>HTTP/1.0</h2><p><strong>1996年5月，HTTP/1.0版本</strong>发布，内容大大增加：</p>\n<ol>\n<li>可以传送任何格式的内容（图像、视频、二进制文件等）；</li>\n<li>除了<code>GET</code>命令，还引入了<code>POST</code>命令和<code>HEAD</code>命令；</li>\n<li>请求和响应格式变化，除数据部分还包括头信息（HTTP header）；</li>\n<li>新增功能还包括：状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等。</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>HTTP/1.0版的<strong>主要缺点是</strong>，<em>每个TCP连接只能发送一个请求</em>。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</p>\n<p>TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。<br>为了解决这个问题，有些浏览器在请求时，用了一个非标准的<code>Connection</code>字段：<code>Connection: keep-alive</code>。</p>\n<p>这个字段要求服务器不要关闭TCP连接，以便其他请求复用。服务器同样回应这个字段：<code>Connection: keep-alive</code>。</p>\n<p>一个可以复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。<strong>但是</strong>，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p>\n<h2 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP/1.1\"></a>HTTP/1.1</h2><p><strong>1997年1月，HTTP/1.1版本发布</strong>，只比 1.0 版本晚了半年。它进一步完善了HTTP协议，一直用到了20年后的今天，直到现在还是最流行的版本。主要变化有：</p>\n<ol>\n<li>引入<strong>持久连接（persistent connection）</strong>，即TCP连接默认不关闭，可以被多个请求复用，不用声明<code>Connection: keep-alive</code>；</li>\n<li>引入了<strong>管道机制（pipelining）</strong>，即在同一个TCP连接里面，客户端可以同时发送多个请求；</li>\n<li>新增了许多动词方法：<code>PUT</code>、<code>PATCH</code>、<code>HEAD</code>、<code>OPTIONS</code>、<code>DELETE</code>；</li>\n<li>客户端请求的头信息新增了<code>Host</code>字段，用来指定服务器的域名：<code>Host: www.example.com</code>。</li>\n</ol>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>虽然1.1版允许复用TCP连接，但是<em>同一个TCP连接里面，所有的数据通信是按次序进行</em>的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为”队头堵塞”（Head-of-line blocking）。</p>\n<p>为了避免这个问题，只有<strong>两种方法</strong>：</p>\n<p>一是减少请求数；</p>\n<p>二是同时多开持久连接。</p>\n<p>这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。如果HTTP协议设计得更好一些，这些额外的工作是可以避免的。</p>\n<h2 id=\"SPDY协议\"><a href=\"#SPDY协议\" class=\"headerlink\" title=\"SPDY协议\"></a>SPDY协议</h2><p>2009年，谷歌公开了自行研发的<strong>SPDY协议</strong>，主要解决HTTP/1.1效率不高的问题。这个协议在Chrome浏览器上证明可行以后，就被当作HTTP/2的基础，主要特性都在HTTP/2之中得到继承。</p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p><strong>2015年，HTTP/2发布</strong>。它不叫<em>HTTP/2.0</em>，是因为标准委员会不打算再发布子版本了，下一个新版本将是<em>HTTP/3</em>。</p>\n<h3 id=\"二进制协议\"><a href=\"#二进制协议\" class=\"headerlink\" title=\"二进制协议\"></a>二进制协议</h3><p>HTTP/1.1版的头信息肯定是文本（ASCII编码），数据体可以是文本，也可以是二进制。<strong>HTTP/2则是一个彻底的二进制协议</strong>，头信息和数据体都是二进制，并且统称为”帧”（frame）：<em>头信息帧</em>和<em>数据帧</em>。</p>\n<p>二进制协议的一个<strong>好处是</strong>，可以定义额外的帧。HTTP/2定义了近十种帧，为将来的高级应用打好了基础。如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多。</p>\n<h3 id=\"多工\"><a href=\"#多工\" class=\"headerlink\" title=\"多工\"></a>多工</h3><p>HTTP/2复用TCP连接，<em>在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”</em>。</p>\n<p>举例来说，在一个TCP连接里面，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分，接着回应B请求，完成后，再发送A请求剩下的部分。这样双向的、实时的通信，就叫做<strong>多工（Multiplexing）</strong>。</p>\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><p>因为HTTP/2的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。<br>HTTP/2将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为<em>奇数</em>，服务器发出的，ID为<em>偶数</em>。</p>\n<p>数据流发送到一半的时候，客户端和服务器都可以发送信号（RST_STREAM帧），取消这个数据流。1.1版取消数据流的唯一方法，就是关闭TCP连接。这就是说，HTTP/2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。</p>\n<p>客户端还可以指定数据流的优先级。优先级越高，服务器就会越早回应。</p>\n<h3 id=\"头信息压缩\"><a href=\"#头信息压缩\" class=\"headerlink\" title=\"头信息压缩\"></a>头信息压缩</h3><p>HTTP协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如<code>Cookie</code>和<code>User Agent</code>，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。</p>\n<p>HTTP/2对这一点做了优化，引入了<strong>头信息压缩机制（header compression）</strong>。一方面，头信息使用<em>gzip</em>或<em>compress</em>压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</p>\n<h3 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h3><p>HTTP/2允许服务器未经请求，主动向客户端发送资源，这叫做<strong>服务器推送（server push）</strong>。</p>\n<p>常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p>\n","categories":["HTTP"],"tags":[]},{"title":"Mac开发常用工具汇总","url":"http://blog.wuzhiwei.cn/2017/04/01/mac-tools.html","content":"<p>汇总记录一些自己平常在Mac下开发时经常使用到的工具软件。</p>\n<blockquote>\n<p>不定时更新！</p>\n</blockquote>\n<h2 id=\"iHosts\"><a href=\"#iHosts\" class=\"headerlink\" title=\"iHosts\"></a><a href=\"https://toolinbox.net/iHosts/\" target=\"_blank\" rel=\"external\">iHosts</a></h2><p><strong>iHosts</strong>是<em>Hosts（/etc/hosts）</em>编辑管理工具。使用分组管理<em>Hosts</em>，灵活组合、一键切换。</p>\n<ul>\n<li>使用分组管理<em>Hosts</em>，环境再复杂也不怕；</li>\n<li>不同<em>Hosts</em>间任意组合，一键切换不同环境；</li>\n<li>实时查看<em>Hosts</em>，明确当前状态，便捷又自信；</li>\n<li>以<strong>沙盒模式运行，无需Root权限，安全放心</strong>；</li>\n<li>原生界面与交互，好用的就像Mac原生应用。<br>查看详细<a href=\"https://h.ihosts.toolinbox.net/cn/\" target=\"_blank\" rel=\"external\">使用手册</a>。<blockquote>\n<p><em>Hosts</em>文件是一个用于储存计算机网络中各节点信息的计算机文件。这个文件负责将主机名称映射到相应的IP地址。<em>Hosts</em>文件通常用于补充或取代网络中DNS的功能。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a><a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iTerm2</a></h2><p><strong>iTerm2</strong>是Mac系统中不可多得的命令行工具之一。给我们带来了许多方便快捷的功能，如：</p>\n<ul>\n<li><p>选中即复制<br>在<em>iTerm2</em>中，选中就自动复制成功，在你需要的地方按下<code>command + v</code>即可粘贴成功。</p>\n</li>\n<li><p>全文查找功能<br>类似于我们在文本编辑器中编辑文字一样，只要<code>command + f</code>输入要查找的内容，即可在当前命令行页面查找并高亮显示。</p>\n</li>\n<li><p>分屏显示<br><code>command + shift + d</code>水平分屏，<code>command + d</code>垂直分屏。</p>\n</li>\n</ul>\n<blockquote>\n<p>分屏显示后，黑色的为当前激活窗口，灰色为未激活窗口。</p>\n</blockquote>\n<ul>\n<li><p>保存<em>ssh</em>远程登录指令<br><em>iTerm2-&gt;Preferences-&gt;Profiles</em>下进行相关配置保存即可。</p>\n</li>\n<li><p><code>command + ;</code>自动补全命令</p>\n</li>\n<li><p>定义专属快捷键<br><em>iTerm2-&gt;Preferences-&gt;Keys</em>可以根据自己的习惯定义自己的专属快捷键<a href=\"/2017/04/25/iterm2-shortcut-key.html\">（常用快捷键参考）</a>。</p>\n</li>\n</ul>\n<h2 id=\"PhpStorm\"><a href=\"#PhpStorm\" class=\"headerlink\" title=\"PhpStorm\"></a><a href=\"https://www.jetbrains.com/phpstorm/\" target=\"_blank\" rel=\"external\">PhpStorm</a></h2><p><strong>PhpStorm</strong>主要用于开发<em>PHP</em>。</p>\n<h2 id=\"IntelliJ-IDEA\"><a href=\"#IntelliJ-IDEA\" class=\"headerlink\" title=\"IntelliJ IDEA\"></a><a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"external\">IntelliJ IDEA</a></h2><p><strong>IntelliJ IDEA</strong>主要用于支持Java、Scala、Groovy等语言的开发工具，同时具备支持目前主流的技术和框架，擅长于企业应用、移动应用和Web应用的开发。</p>\n<p><a href=\"http://www.phperz.com/special/83.html\" target=\"_blank\" rel=\"external\">IntelliJ IDEA使用教程1</a>，<a href=\"http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/\" target=\"_blank\" rel=\"external\">IntelliJ IDEA使用教程2</a>。</p>\n<blockquote>\n<p><strong>IntelliJ IDEA 是目前所有 IDE 中最具备沉浸式的 IDE，没有之一。</strong></p>\n</blockquote>\n","categories":["Mac"],"tags":[]},{"title":"诞生记——GitHub Pages+Hexo","url":"http://blog.wuzhiwei.cn/2017/04/01/gh-pages-hexo-blog.html","content":"<h2 id=\"为什么要使用静态博客？\"><a href=\"#为什么要使用静态博客？\" class=\"headerlink\" title=\"为什么要使用静态博客？\"></a>为什么要使用静态博客？</h2><ul>\n<li>轻量级的博客系统，没有麻烦的配置，跨平台同步文件；</li>\n<li>无需自己搭建服务器；</li>\n<li>使用标记语言，如<a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">Markdown</a>；</li>\n<li>根据Github的限制，对应的每个站有300MB空间；</li>\n<li>可以绑定自己的域名。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://staticsitegenerators.net/\" target=\"_blank\" rel=\"external\">静态站点生成器列表</a></p>\n</blockquote>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ol>\n<li><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js官网</a>下载相应平台（注：此篇为<em>Windows</em>）的<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">最新版本</a>安装。</li>\n<li>Git使用msysgit，<a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"external\">下载安装</a>。</li>\n<li>注册<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">GitHub</a>账号，创建相应仓库，添加SSH公钥。<blockquote>\n<p>注意：<a href=\"https://help.github.com/articles/user-organization-and-project-pages/\" target=\"_blank\" rel=\"external\">个人（组织）主页与项目主页</a>区别！<a href=\"http://blog.wuzhiwei.cn\">本博客</a>部署在项目主页（Project Pages）的<em>gh-pages</em>分支下，并<a href=\"https://help.github.com/articles/setting-up-a-custom-subdomain/\" target=\"_blank\" rel=\"external\">绑定二级子域</a><em>blog.wuzhiwei.cn</em>。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo官网</a>，<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">中文文档传送门</a>。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><em>Node.js</em>和<em>Git</em>安装好后，可执行下面命令安装<em>Hexo</em>：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p><em>cd</em>到目标目录（/path/to/hexo），执行下面命令进行初始化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo init <span class=\"comment\">#或 hexo init &lt;/path/to/hexo&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h3><p>初始化完成后，会产生如下目录：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy_git</div><div class=\"line\">├── public <span class=\"comment\"># 此目录是稍后，hexo generate生成的</span></div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── <span class=\"built_in\">source</span></div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li><em>.deploy_git</em>：执行<code>hexo deploy</code>命令，部署到<em>GitHub</em>上的内容目录；</li>\n<li><em>public</em>：执行<code>hexo generate</code>命令，生成的静态网页内容目录；</li>\n<li><em>scaffolds</em>：<em>layout</em>模板文件目录，其中的<em>md</em>文件可以添加编辑；</li>\n<li><em>source</em>：文章源码目录，此目录下的<em>md</em>和<em>html</em>文件都会被Hexo处理；该目录对应<em>repo</em>的根目录，404文件、favicon.ico文件、CNAME文件都应该放这里；该目录下可以新建页面目录：<ul>\n<li><em>_drafts</em>：草稿文章；</li>\n<li><em>_posts</em>：发布文章；</li>\n</ul>\n</li>\n<li><em>themes</em>：主题文件目录；</li>\n<li><em>_config.yml</em>：全局配置文件；</li>\n<li><em>package.json</em>：应用程序数据，指明Hexo的版本等信息。</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo generate <span class=\"comment\"># 生成静态文件，会在当前目录下生成一个pulic文件夹，可简写为：hexo g</span></div><div class=\"line\">hexo server <span class=\"comment\"># 启动本地WEB服务，用于博客的预览，可简写为：hexo s</span></div><div class=\"line\">hexo deploy <span class=\"comment\"># 部署到远端（如GitHub等），可简写为：hexo d</span></div><div class=\"line\"></div><div class=\"line\">hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\"># 新建文章</span></div><div class=\"line\">hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\"># 新建页面</span></div><div class=\"line\"><span class=\"comment\"># 组合使用</span></div><div class=\"line\">hexo d -g <span class=\"comment\"># 生成部署</span></div><div class=\"line\">hexo s -g <span class=\"comment\"># 生成预览</span></div></pre></td></tr></table></figure>\n<p>更多命令可参阅<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">Hexo帮助文档</a>。</p>\n<h3 id=\"主题设置\"><a href=\"#主题设置\" class=\"headerlink\" title=\"主题设置\"></a>主题设置</h3><p><strong>安装主题</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/path/to/theme.git themes/theme</div></pre></td></tr></table></figure></p>\n<p><strong>启用主题</strong><br>修改Hexo目录下的<em>_config.yml</em>配置文件中的<em>theme</em>属性，指定对应的主题名即可。</p>\n<p><strong>更新主题</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> themes/theme</div><div class=\"line\">git pull</div><div class=\"line\">hexo s -g</div></pre></td></tr></table></figure></p>\n<p>主题目录示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── languages          <span class=\"comment\">#多语言</span></div><div class=\"line\">|   ├── default.yml    <span class=\"comment\">#默认语言</span></div><div class=\"line\">|   └── zh-CN.yml      <span class=\"comment\">#中文语言</span></div><div class=\"line\">├── layout             <span class=\"comment\">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></div><div class=\"line\">|   ├── _partial       <span class=\"comment\">#局部的布局，此目录下的*.ejs是对头尾等局部的控制</span></div><div class=\"line\">|   └── _widget        <span class=\"comment\">#小挂件的布局，页面下方小挂件的控制</span></div><div class=\"line\">├── <span class=\"built_in\">source</span>             <span class=\"comment\">#源码</span></div><div class=\"line\">|   ├── css            <span class=\"comment\">#css源码 </span></div><div class=\"line\">|   |   ├── _base      <span class=\"comment\">#*.styl基础css</span></div><div class=\"line\">|   |   ├── _partial   <span class=\"comment\">#*.styl局部css</span></div><div class=\"line\">|   |   ├── fonts      <span class=\"comment\">#字体</span></div><div class=\"line\">|   |   ├── images     <span class=\"comment\">#图片</span></div><div class=\"line\">|   |   └── style.styl <span class=\"comment\">#*.styl引入需要的css源码</span></div><div class=\"line\">|   ├── fancybox       <span class=\"comment\">#fancybox效果源码</span></div><div class=\"line\">|   └── js             <span class=\"comment\">#javascript源代码</span></div><div class=\"line\">├── _config.yml        <span class=\"comment\">#主题配置文件</span></div><div class=\"line\">└── README.md          <span class=\"comment\">#用GitHub的都知道</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"404页面\"><a href=\"#404页面\" class=\"headerlink\" title=\"404页面\"></a>404页面</h3><p>制作404页面，直接在<em>/source/</em>目录下创建自己的<em>404.html</em>或<em>404.md</em>文件即可。GitHub Pages有提供制作404页面的指引：<a href=\"https://help.github.com/articles/custom-404-pages\" target=\"_blank\" rel=\"external\">Custom 404 Pages</a>。</p>\n<p><strong>推荐</strong>使用<a href=\"http://www.qq.com/404/\" target=\"_blank\" rel=\"external\">腾讯公益404</a>。</p>\n<h2 id=\"附A：参考\"><a href=\"#附A：参考\" class=\"headerlink\" title=\"附A：参考\"></a>附A：参考</h2><ul>\n<li>[x] <a href=\"http://alincode.github.io/blog/2016/03/05/hexo-deploy/\" target=\"_blank\" rel=\"external\">將Hexo部署到GitHub Page</a></li>\n<li>[x] <a href=\"http://wiki.jikexueyuan.com/project/github-pages-basics/\" target=\"_blank\" rel=\"external\">GitHub Pages指南</a></li>\n<li>[x] <a href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\" rel=\"external\">Hexo在github上构建免费的Web应用</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"附B：资源地址\"><a href=\"#附B：资源地址\" class=\"headerlink\" title=\"附B：资源地址\"></a>附B：资源地址</h2><ul>\n<li><a href=\"http://www.webluker.com/\" target=\"_blank\" rel=\"external\">Webluker-CDN网站加速</a></li>\n<li><a href=\"http://www.jiankongbao.com/\" target=\"_blank\" rel=\"external\">监控宝-网站监控</a></li>\n<li><a href=\"http://www.google.com/intl/zh-CN/webmasters\" target=\"_blank\" rel=\"external\">谷歌站长工具</a></li>\n<li><a href=\"http://zhanzhang.baidu.com/\" target=\"_blank\" rel=\"external\">百度站长工具</a></li>\n<li><a href=\"http://tool.chinaz.com/\" target=\"_blank\" rel=\"external\">站长之家工具</a></li>\n<li><a href=\"http://zhanzhang.so.com/\" target=\"_blank\" rel=\"external\">360搜索站长平台</a></li>\n<li><a href=\"http://webscan.360.cn/\" target=\"_blank\" rel=\"external\">360网站安全检测</a></li>\n<li><a href=\"http://jk.cloud.360.cn/\" target=\"_blank\" rel=\"external\">360云监控</a></li>\n<li><a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"external\">不蒜子</a></li>\n<li><a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"external\">百度统计</a></li>\n<li><a href=\"http://www.google.com/analytics/web/?hl=zh-CN\" target=\"_blank\" rel=\"external\">Google Analytics</a></li>\n<li><a href=\"http://exmail.qq.com/\" target=\"_blank\" rel=\"external\">腾讯企业邮箱</a></li>\n<li><a href=\"http://pic.sdodo.com/tool/mailpic\" target=\"_blank\" rel=\"external\">邮箱地址生成图片</a></li>\n<li><a href=\"http://www.makepic.com/email.php\" target=\"_blank\" rel=\"external\">MakePic.com邮址图片生成</a></li>\n<li><a href=\"http://tool.lu/favicon\" target=\"_blank\" rel=\"external\">Favicon制作</a></li>\n<li><a href=\"http://www.wumii.com/widget/relatedItems\" target=\"_blank\" rel=\"external\">无觅关联推荐</a></li>\n<li><a href=\"http://www.ujian.cc/\" target=\"_blank\" rel=\"external\">友荐</a></li>\n<li><a href=\"http://tuijian.baidu.com/\" target=\"_blank\" rel=\"external\">百度推荐</a></li>\n<li><a href=\"http://union.baidu.com/\" target=\"_blank\" rel=\"external\">百度联盟</a></li>\n<li><a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a></li>\n<li><a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">HexoThemes</a></li>\n<li><a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"external\">DNSPod</a></li>\n<li><a href=\"http://www.sousuoyinqingtijiao.com/\" target=\"_blank\" rel=\"external\">搜索引擎提交入口</a></li>\n<li><a href=\"https://qr.alipay.com/paipai/open.htm\" target=\"_blank\" rel=\"external\">支付宝二维码</a></li>\n</ul>\n<h2 id=\"附C：参考主题\"><a href=\"#附C：参考主题\" class=\"headerlink\" title=\"附C：参考主题\"></a>附C：参考主题</h2><ul>\n<li><a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"external\">fexo</a> | <a href=\"http://forsigner.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/lenbo-ma/hexo-theme-vno\" target=\"_blank\" rel=\"external\">Vno</a> | <a href=\"http://mlongbo.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/ken8203/hexo-theme-alberta\" target=\"_blank\" rel=\"external\">Alberta</a> | <a href=\"http://jaychung.tw/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/willerce/hexo-theme-noderce\" target=\"_blank\" rel=\"external\">Noderce</a> | <a href=\"http://willerce.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"external\">Maupassant</a> | <a href=\"https://www.haomwei.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/7ye/maupassant-hexo\" target=\"_blank\" rel=\"external\">Maupassant</a> | <a href=\"http://sevennight.cc/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">NexT</a> | <a href=\"http://heroicyang.com\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/idhyt/hexo-theme-next/tree/magiclamp\" target=\"_blank\" rel=\"external\">Mala</a> | <a href=\"http://blog.idhyt.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/someus/huno\" target=\"_blank\" rel=\"external\">Huno</a> | <a href=\"http://letiantian.me/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/hustcer/hexo-theme-air\" target=\"_blank\" rel=\"external\">Air</a> | <a href=\"http://topdna.org/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/henryhuang/hexo-theme-aloha\" target=\"_blank\" rel=\"external\">Aloha</a> | <a href=\"http://huangyijie.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/steven5538/hexo-theme-athena\" target=\"_blank\" rel=\"external\">Athena</a> | <a href=\"http://steven5538.tw/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/someus/huno\" target=\"_blank\" rel=\"external\">Huno</a> | <a href=\"http://letiantian.me/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/wizicer/iceman\" target=\"_blank\" rel=\"external\">Iceman</a> | <a href=\"http://icerdesign.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">NexT</a> | <a href=\"http://notes.iissnan.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/henryhuang/oishi\" target=\"_blank\" rel=\"external\">Oishi</a> | <a href=\"http://henryhuang.github.io/oishi/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/SuperKieran/TKL\" target=\"_blank\" rel=\"external\">TKL</a> | <a href=\"http://go.kieran.top/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">Yilia</a> | <a href=\"http://litten.me/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/DrakeLeung/blog\" target=\"_blank\" rel=\"external\">DrakeLeung</a> | <a href=\"https://lyyourc.com\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/Ben02/hexo-theme-Anatole\" target=\"_blank\" rel=\"external\">Anatole</a> | <a href=\"http://anatole.munen.cc\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/pinggod/hexo-theme-apollo\" target=\"_blank\" rel=\"external\">Apollo</a> | <a href=\"http://pinggod.com\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/CodeDaraW/Hacker\" target=\"_blank\" rel=\"external\">Hacker</a> | <a href=\"https://blog.daraw.cn/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/stiekel/hexo-theme-random\" target=\"_blank\" rel=\"external\">Random</a> | <a href=\"https://chensd.com/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/geekplux/hexo-theme-typing\" target=\"_blank\" rel=\"external\">Typing</a> | <a href=\"http://geekplux.com\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" rel=\"external\">Yelee</a> | <a href=\"http://moxfive.xyz\" target=\"_blank\" rel=\"external\">Demo</a></li>\n<li><a href=\"https://github.com/icylogic/carbon\" target=\"_blank\" rel=\"external\">Carbon</a> | <a href=\"https://icylogic.github.io/carbon/\" target=\"_blank\" rel=\"external\">Demo</a></li>\n</ul>\n","categories":["Hexo","GitHub"],"tags":[]},{"title":"杂记：Hi！","url":"http://blog.wuzhiwei.cn/2017/04/01/zaji-hi.html","content":"<p>欢迎来到<a href=\"http://blog.wuzhiwei.cn/\">杂记</a>！</p>\n<h2 id=\"为什么叫“杂记”\"><a href=\"#为什么叫“杂记”\" class=\"headerlink\" title=\"为什么叫“杂记”\"></a>为什么叫“杂记”</h2><p>杂记一体，所包甚广。以其所记者杂，故曰《杂记》。</p>\n<h2 id=\"为什么写“杂记”\"><a href=\"#为什么写“杂记”\" class=\"headerlink\" title=\"为什么写“杂记”\"></a>为什么写“杂记”</h2><ol>\n<li>生活的记录<br>去过的地方，看过的风景，见过的奇人，听过的轶闻，记录生活的点滴。</li>\n<li>学习的督促<br>督促自己有始有终、有规划、有结果的学习。</li>\n<li>知识的积累<br>“不积跬步，无以至千里；不积小流，无以成江海。”，不在乎大小，而在于积累。</li>\n<li>思维的训练<br>“如果一件事情你不能讲清楚，十有八九你还没有完全理解。”写下来，将有助于你理解得更加深刻。</li>\n<li>分享的乐趣<br>做一个分享网络中的点。</li>\n<li>互联网的ID<br>没错，你发现了杂记的域名<strong>blog.wuzhiwei.cn</strong>就是我的名字的全拼。</li>\n</ol>\n<p>它真的很<strong>杂</strong>。</p>\n<h2 id=\"立一个小目标\"><a href=\"#立一个小目标\" class=\"headerlink\" title=\"立一个小目标\"></a>立一个小目标</h2><p><strong>先写它个十年！</strong>——公元2017年04月01日</p>\n<p>从现在开始！</p>\n","categories":["随笔"],"tags":[]},{"title":"","url":"http://blog.wuzhiwei.cn/404.html","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>公益404 | 杂记 | 我的博客（blog.wuzhiwei.cn）</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <meta name=\"keywords\" content=\"PHP,JavaScript,Html,Linux,WEB开发,Mac,后端开发,程序员,杂记,随笔,博客,好文,摄影,旅行,网球,blog.wuzhiwei.cn,wuzhiwei.cn\">\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/archives/\" homepagename=\"回到我的博客\"></script>\n  </body>\n</html>","categories":[],"tags":[]},{"title":"","url":"http://blog.wuzhiwei.cn/googleea01f30192587d45.html","content":"google-site-verification: googleea01f30192587d45.html","categories":[],"tags":[]},{"title":"分类","url":"http://blog.wuzhiwei.cn/category/index.html","content":"","categories":[],"tags":[]},{"title":"About","url":"http://blog.wuzhiwei.cn/about/index.html","content":"","categories":[],"tags":[]},{"title":"搜索","url":"http://blog.wuzhiwei.cn/search/index.html","content":"","categories":[],"tags":[]}]