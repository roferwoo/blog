<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杂记 | 我的博客（blog.wuzhiwei.cn）</title>
  <subtitle>杂记一体，所包甚广，所记者杂，故曰《杂记》。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wuzhiwei.cn/"/>
  <updated>2017-06-22T13:48:55.000Z</updated>
  <id>http://blog.wuzhiwei.cn/</id>
  
  <author>
    <name>wzw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac下Java开发环境搭建</title>
    <link href="http://blog.wuzhiwei.cn/2017/06/16/mac-java-start.html"/>
    <id>http://blog.wuzhiwei.cn/2017/06/16/mac-java-start.html</id>
    <published>2017-06-16T01:16:03.000Z</published>
    <updated>2017-06-22T13:48:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要求几个Java项目，所以要把大学时期学习的Java捡起来，虽然在学校学习的是Java、JSP的一套，但毕业后就没写过了，一直做的PHP。也好借此机会重新学习一下吧，首先需要的当然是搭建开发环境，没有环境怎么玩！一步一步来吧~</p>
<h2 id="一、安装JDK"><a href="#一、安装JDK" class="headerlink" title="一、安装JDK"></a>一、安装JDK</h2><p><strong>JDK</strong>是Java语言的软件开发工具包，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个Java开发的核心，它包含了Java的运行环境，Java工具和Java基础的类库。<br>没有JDK的话，无法编译Java程序。</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">-<span class="ruby">&gt; java -version</span></div><div class="line">No Java runtime present, requesting install.</div></pre></td></tr></table></figure>
<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网下载</a>相应的JDK版本，然后安装（傻瓜式）。安装完成后，再打开Terminal，执行命令<code>java -version</code>即可查看到我们安装的JDK版本信息。</p>
<h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">-<span class="ruby">&gt; <span class="regexp">/usr/libexec</span><span class="regexp">/java_home -v # 查看JDK真实路径</span></span></div><div class="line"><span class="comment">/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home</span></div></pre></td></tr></table></figure>
<p>复制以上路径，编辑配置文件：<code>sudo vim /etc/profile</code>添加Java环境变量配置，如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Java环境变量配置</span></div><div class="line"><span class="attribute">JAVA_HOME</span>=<span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home"</span></div><div class="line"><span class="attribute">CLASS_PATH</span>=<span class="string">".:<span class="variable">$JAVA_HOME</span>/lib"</span></div><div class="line"><span class="comment"># 把JAVA添加到环境变量PATH中</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin"</span></div></pre></td></tr></table></figure>
<h2 id="三、配置服务器tomcat"><a href="#三、配置服务器tomcat" class="headerlink" title="三、配置服务器tomcat"></a>三、配置服务器tomcat</h2><p><a href="http://tomcat.apache.org/download-90.cgi" target="_blank" rel="external">官网下载</a>对应版本，解压到自己想放置的位置。<code>sudo vim /etc/profile</code>添加Tomcat环境变量配置，如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Tomcat环境变量配置</span></div><div class="line"><span class="attribute">TOMCAT_HOME</span>=<span class="string">"/usr/local/tomcat"</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$TOMCAT_HOME</span>/bin"</span></div></pre></td></tr></table></figure>
<p>设置完成后，执行<code>sudo chmod +x $TOMCAT_HOME/bin/*.sh</code>，之后可以使用<code>$TOMCAT_HOME/bin/startup.sh</code>启动Tomcat，默认端口为8080。浏览器访问<em>localhost:8080</em>即可看到Tomcat的相关信息界面。</p>
<h2 id="四、开发工具IDE"><a href="#四、开发工具IDE" class="headerlink" title="四、开发工具IDE"></a>四、开发工具IDE</h2><ul>
<li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a>，<a href="http://www.phperz.com/special/83.html" target="_blank" rel="external">IntelliJ IDEA使用教程</a>。</li>
<li><a href="http://www.eclipse.org/downloads/" target="_blank" rel="external">Eclipse</a></li>
<li><a href="https://www.eclipse.org/che/getting-started/download/" target="_blank" rel="external">Eclipse Che</a></li>
<li><a href="https://netbeans.org/downloads/index.html" target="_blank" rel="external">NetBeans</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      Mac,Java,JDK8,Java开发环境
    
    </summary>
    
      <category term="Mac" scheme="http://blog.wuzhiwei.cn/categories/Mac/"/>
    
      <category term="Java" scheme="http://blog.wuzhiwei.cn/categories/Mac/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Git Stash用法</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/27/git-stash.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/27/git-stash.html</id>
    <published>2017-04-27T08:55:33.000Z</published>
    <updated>2017-06-13T13:20:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编码过程中经常会碰到突发BUG，需要紧急修复的场景（<em>BUG高于需求</em>）。可能与你写到一半的代码（<em>没有完成，不该提交</em>）产生冲突，这时Git为我们提供<code>git stash</code>命令将工作现场<strong>暂存</strong>起来，等以后恢复现场后继续之前未完成的编码。相关命令参考：</p>
<blockquote>
<p>注：[]方括号中内容为可选，[<stash>]里面的stash代表进度的编号形如：stash@{0}, &lt;&gt;尖括号内的必填。</stash></p>
</blockquote>
<ul>
<li><code>git stash</code><br>对当前的暂存区和工作区状态进行保存。</li>
<li><code>git stash list</code><br>列出所有保存的进度列表。</li>
<li><code>git stash pop [--index] [&lt;stash&gt;]</code><br>恢复工作进度现场。<br><code>--index</code>参数表示不仅恢复工作区，还恢复暂存区；<br><code>&lt;stash&gt;</code>指定定恢复某个具体进度，如果没有这个参数，则默认恢复最新的进度。如：<code>git stash pop --index stash@{0}</code>表示恢复编号为0的进度的工作区和暂存区。</li>
<li><code>git stash [save message] [-k|--no-keep-index] [--patch]</code><br><strong>这是<code>git stash</code>最完整的命令形式</strong>。使用<code>save</code>可以对进度添加备注，如<code>git stash save &quot;备注&quot;</code>。<br><code>-k</code>和<code>--no-keep-index</code>指定保存进度后，是否重置暂存区。<br><code>--patch</code>会显示工作区和HEAD的差异，通过编辑差异文件，排除不需要保存的内容。</li>
<li><code>git stash apply [--index] [&lt;stash&gt;]</code><br>不删除已恢复的进度，其他同<code>git stash pop</code>。</li>
<li><code>git stash drop [&lt;stash&gt;]</code><br>删除某一个进度，默认删除最新进度。</li>
<li><code>git stash clear</code><br>删除所有进度。</li>
<li><code>git stash branch &lt;branchname&gt; &lt;stash&gt;</code><br>基于进度创建分支。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Git,Stash,Git命令,MacBook Pro,Mac,Tools,Mac开发常用工具
    
    </summary>
    
      <category term="Git" scheme="http://blog.wuzhiwei.cn/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>iTerm2常用快捷键</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/25/iterm2-shortcut-key.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/25/iterm2-shortcut-key.html</id>
    <published>2017-04-25T07:39:30.000Z</published>
    <updated>2017-06-13T08:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>iTerm2</strong>开源免费，与<em>zsh</em>搭配差不多已经取代了<em>Terminal + bash</em>成为Mac上终端工具的标准配置。下面整理<strong>iTerm2</strong>使用过程中常用的快捷键。</p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li>新建标签：<code>command + t</code></li>
<li>关闭标签：<code>command + w</code></li>
<li>切换标签：<code>command + 数字</code>或<code>command + 左右方向键</code></li>
<li>切换全屏：<code>command + enter</code></li>
<li>全文查找：<code>command + f</code></li>
</ul>
<h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><ul>
<li>垂直分屏：<code>command + d</code></li>
<li>水平分屏：<code>command + shift + d</code></li>
<li>切换屏幕：<code>command + option + 方向键</code>或<code>command + [</code>或<code>command + ]</code></li>
<li>查看历史命令：<code>command + ;</code></li>
<li>查看剪贴板历史：<code>command + shift + h</code></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>打开文件、文件夹和链接：<code>command + Click</code></li>
<li>新建窗口：<code>command + n</code></li>
<li>清除当前行：<code>ctrl + u</code></li>
<li>到行首：<code>ctrl + a</code></li>
<li>到行尾：<code>ctrl + e</code></li>
<li>上一条命令：<code>ctrl + p</code></li>
<li>搜索命令历史：<code>ctrl + r</code></li>
<li>删除当前光标的字符：<code>ctrl + d</code></li>
<li>删除光标之前的字符：<code>ctrl + h</code></li>
<li>删除光标之前的单词：<code>ctrl + w</code></li>
<li>删除到文本末尾：<code>ctrl + k</code></li>
<li>交换光标处广本：<code>ctrl + t</code></li>
<li>清屏：<code>command + r</code>或<code>ctrl + l</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      iTerms,Shortcut key,快捷键,iTerms快捷建,MacBook Pro,Mac,Tools,Mac开发常用工具
    
    </summary>
    
      <category term="Mac" scheme="http://blog.wuzhiwei.cn/categories/Mac/"/>
    
      <category term="iTerms" scheme="http://blog.wuzhiwei.cn/categories/Mac/iTerms/"/>
    
    
  </entry>
  
  <entry>
    <title>VIM操作技巧总结</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/21/vim-tips.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/21/vim-tips.html</id>
    <published>2017-04-21T06:21:10.000Z</published>
    <updated>2017-06-16T00:52:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vi最初是由Bill Joy于1976年编码实现的，而Vim(Vi IMproved)则是改进的Vi，由Bram Moolenaar在1991年开发并发布。Vi/Vim是所有Unix/Linux操作系统默认配备的编辑器。功能强大、操作高效，命令非常多、用法极为灵活。</p>
<p>“工欲善其事，必先利其器”。在Vi/Vim版本的选择上，原则是<strong>“能用Vim就不要使用Vi；能用最新版就不要守着旧版本”</strong>。Vim提供的功能和特性要比Vi多得多，如语法加亮着色功能等。</p>
<h1 id="启动关闭命令"><a href="#启动关闭命令" class="headerlink" title="启动关闭命令"></a>启动关闭命令</h1><p>启动及关闭Vi/Vim的基本命令，见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">启动</td>
<td style="text-align:left"><code>vi</code>打开Vi/Vim<br><code>vi &lt;file&gt;</code>打开Vi/Vim，并加载文件<file></file></td>
</tr>
<tr>
<td style="text-align:left">退出</td>
<td style="text-align:left"><code>ZQ</code>/<code>:q!</code>无条件退出<br><code>ZZ</code>/<code>:wq</code>保存退出</td>
</tr>
<tr>
<td style="text-align:left">保存部分文件</td>
<td style="text-align:left"><code>:m,nw &lt;file&gt;</code>将m行到n行部分的内容保存到文件<file>中<br><code>:m,n &gt;&gt; &lt;file&gt;</code>将m行到n行的内容添加到文件<file>的末尾</file></file></td>
</tr>
</tbody>
</table>
<p>临时退出Vi/Vim、进入shell环境后再回来的方法：</p>
<ul>
<li><strong>方法一、使用<code>Ctrl+z</code>和<code>fg</code>这两个命令组合。</strong></li>
</ul>
<p>这一解决方法主要利用了Linux/Unix的作业机制。具体原理是：<code>Ctrl+z</code>命令将当前的Vi/Vim进程<em>放到后台执行</em>，之后shell环境即可为你所用；<code>fg</code>命令则将位于后台的Vi/Vim进程放到前台执行，这样我们就再次进入Vi/Vim操作界面并恢复到原先的编辑状态。</p>
<ul>
<li><strong>方法二、使用行命令<code>:sh</code>。</strong></li>
</ul>
<p>在Vi/Vim的命令模式下输入<code>:sh</code>即可进入Linux/Unix shell环境。在要返回到Vi/Vim编辑环境时，输入<code>exit</code>命令即可。</p>
<h1 id="移动光标命令"><a href="#移动光标命令" class="headerlink" title="移动光标命令"></a>移动光标命令</h1><p>Vi/Vim中关于光标移动的命令非常多，这也是很多人经常困惑并且命令用不好的地方之一。其实Vi/Vim中很多命令是<em>针对不同的操作单位</em>而设的，<strong>不同的命令对应不同的操作单位</strong>。因而，在使用命令进行操作的时候，首先要搞清楚的就是要采用哪种<em>操作单位</em>，也就是说，是要操作<em>一个字符</em>，<em>一个句子</em>，<em>一个段落</em>，还是要操作<em>一行</em>，<em>一屏</em>、<em>一页</em>。单位不同，命令也就不同。只要单位选用得当，命令自然就恰当，操作也自然迅速高效；否则，只能是费时费力。这也可以说是最能体现Vi/Vim优越于其它编辑器的地方之一，也是Vi/Vim有人爱有人恨的地方之一。在操作单位确定之后，才是操作次数，即确定命令重复执行的次数。要正确高效的运用Vi/Vim的各种操作，一定要把握这一原则：<strong>先定单位再定量</strong>。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：<code>5h</code>命令左移5个字符，<code>8w</code>命令右移8个单词。</p>
<p>Vi/Vim中操作单位有很多，按从小到大的顺序为（括号内为相应的操作命令）：<em>字符（h、l）→ 单词 (w、W、b、B、e、E) → 行 (j、k、0、^、$、:n) → 句子（(、)）→ 段落（{、}）→ 屏 (H、M、L) → 页（Ctrl-f、Ctrl-b、Ctrl-u、Ctrl-d) → 文件（G、gg、:0、:$）</em>。</p>
<p>具体命令解释如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作单位</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单词</td>
<td style="text-align:left"><code>w</code>/<code>W</code>移动到下一单词的开头<br><code>b</code>/<code>B</code>移动到上一单词的开头<br><code>e</code>/<code>E</code>移动到光标所在单词的末尾</td>
<td style="text-align:left"><code>W</code>、<code>B</code>、<code>E</code>命令操作的单词是以空白字符（空格、Tab）<br>分隔的字串，比如字符串“str1-str2 str3-str4”，<br>对<code>W</code>、<code>B</code>、<code>E</code>命令来说是两个单词，<br>而对<code>w</code>、<code>b</code>、<code>e</code>命令来说则是四个单词</td>
</tr>
<tr>
<td style="text-align:left">行</td>
<td style="text-align:left"><code>j</code>下移一行<br><code>k</code>上移一行<br><code>0</code>移到当前行形头<br><code>^</code>移到当前行的第一个非空字符<br><code>$</code>移到当前行末尾<br><code>:n</code>移动到第n行</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">句子</td>
<td style="text-align:left"><code>)</code>移到当前句子的末尾<br><code>(</code>移到当前句子的开头</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">段落</td>
<td style="text-align:left"><code>}</code>移到当前段落的末尾<br><code>{</code>移到当前段落的开头</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">屏</td>
<td style="text-align:left"><code>H</code>移到屏幕的第一行<br><code>M</code>移到屏幕的中间一行<br><code>L</code>移到屏幕的最后一行</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">页</td>
<td style="text-align:left"><code>Ctrl+f</code>向前滚动一页<br><code>Ctrl+b</code>向后滚动一页<br><code>Ctrl+u</code>向前滚动半页<br><code>Ctrl+d</code>向后滚动半页</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">文件</td>
<td style="text-align:left"><code>G</code>移动到文件末尾<br><code>gg</code>移动到文件开头<br><code>:0</code>移动到文件第一行<br><code>:$</code>移动到文件最后一行</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h1><p>与光标移动一样，Vi/Vim中关于编辑操作的命令也比较多，但操作单位要比移动光标少得多。按从小到大的顺序为（括号内为相应的操作命令）：<em>字符 （x、c、s、r、i、a）→ 单词 (cw、cW、cb、cB、dw、dW、db、dB) → 行 (dd、d0、d$、I、A、o、O) → 句子（(、)）→ 段落（{、}）</em>。这些操作单位有些可以加操作次数。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：<code>d3w</code>命令删除三个单词，<code>10dd</code>命令删除十行。</p>
<p>具体命令解释如下：</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><table>
<thead>
<tr>
<th style="text-align:left">操作单位</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">字符</td>
<td style="text-align:left"><code>x</code>删除光标位置的字符<br><code>c</code>更改当前字符并进入插入模式<br><code>s</code>替换光标位置的字符并进入插入模式<br><code>r</code>替换光标位置的字符但不进入插入模式<br><code>i</code>在当前位置的字符之前进入插入模式<br><code>a</code>在当前位置的字符之后进入插入模式</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">单词</td>
<td style="text-align:left"><code>cw</code>/<code>cW</code>删除当前单词从光标开始的部分并进入插入模式<br><code>cb</code>/<code>cB</code>删除当前单词从光标所在位置至单词开始的部分并进入插入模式<br><code>dw</code>/<code>dW</code>删除当前单词从光标开始的部分但不进入插入模式<br><code>db</code>/<code>dB</code>删除当前单词从光标所在位置至单词开始的部分但不进入插入模式</td>
<td style="text-align:left"><code>cW</code>、<code>cB</code>、<code>dW</code>、<code>dB</code>命令操作的单词是以空白字符（空格、Tab）<br>分隔的字串，比如字符串“str1-str2 str3-str4”，<br>对<code>cW</code>、<code>cB</code>、<code>dW</code>、<code>dB</code>命令来说是两个单词，<br>而对<code>cw</code>、<code>cb</code>、<code>dw</code>、<code>db</code>命令来说则是四个单词</td>
</tr>
<tr>
<td style="text-align:left">行</td>
<td style="text-align:left"><code>dd</code>删除当前行<br><code>d0</code>删除从当前光标开始到行首的内容<br><code>d$</code>删除从当前光标开始到行末的内容<br><code>I</code>在当前行的行首进入插入模式<br><code>A</code>在当前行的行尾进入插入模式<br><code>o</code>在当前行下方另起一行进入插入模式<br><code>O</code>在当前行上方另起一行进入插入模式</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">句子</td>
<td style="text-align:left"><code>d)</code>删除当前句子从光标位置开始到句末的内容<br><code>d(</code>删除当前句子从光标位置开始到句首的内容</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">段落</td>
<td style="text-align:left"><code>d}</code>删除当前段落从光标位置开始到段末的内容<br><code>d{</code>删除当前段落从光标位置开始到段首的内容</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="高效命令"><a href="#高效命令" class="headerlink" title="高效命令"></a>高效命令</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">复制与粘贴</td>
<td style="text-align:left"><code>yw</code>复制当前单词从光标开始的部分<br><code>yy</code>复制光标所在行的所有字符<br><code>p</code>将最后一个删除或复制文本放在当前字符之后<br><code>P</code>将最后一个删除或复制文本放在当前字符之前</td>
<td style="text-align:left">配合操作数使用可快速拷贝编辑文本</td>
</tr>
<tr>
<td style="text-align:left">撤消与重做</td>
<td style="text-align:left"><code>u</code>撤消更改<br><code>Ctrl+R</code>重做更改</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">重复操作</td>
<td style="text-align:left"><code>.</code>重复上次操作</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">交换相邻<br>字符或行</td>
<td style="text-align:left"><code>xp</code>交换光标位置的字符和它右边的字符<br><code>ddp</code>交换光标位置的行和它的下一行</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">大小写转换</td>
<td style="text-align:left"><code>~</code>将光标下的字母大小写反向转换<br><code>guw</code>将光标所在的单词变为小写<br><code>gUw</code>将光标所在的单词变为大写<br><code>guu</code>光标所在的行所有字符变为小写<br><code>gUU</code>光标所在的行所有字符变为大写<br><code>g~~</code>光标所在的行所有字符大小写反向转换</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">取得外部输入</td>
<td style="text-align:left"><code>:r!&lt;cmd&gt;</code>将命令<cmd>的输出结果插入到当前光标所在位置<br><code>:r &lt;file&gt;</code>将文件<file>读入到当前光标所在位置</file></cmd></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">排序</td>
<td style="text-align:left"><code>:1,$!sort</code>将文件内的所有内容排序</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">加入行号</td>
<td style="text-align:left"><code>:%!nl</code>在所有非空行前加入行号<br><code>:%!nl -ba</code>在所有行前加入行号</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">缩进</td>
<td style="text-align:left"><code>&gt;&gt;</code>右缩进，可配合操作数使用<br><code>&lt;&lt;</code>左缩进，可配合操作数使用</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">自动补全</td>
<td style="text-align:left"><code>Ctrl+p</code>自动补全</td>
</tr>
<tr>
<td style="text-align:left">显示当前编辑文件名</td>
<td style="text-align:left"><code>Ctrl+g</code>显示当前编辑文件名及行数</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">显示字符内码</td>
<td style="text-align:left"><code>ga</code>显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1 id="搜索与替换命令"><a href="#搜索与替换命令" class="headerlink" title="搜索与替换命令"></a>搜索与替换命令</h1><h2 id="文本搜索的基本命令"><a href="#文本搜索的基本命令" class="headerlink" title="文本搜索的基本命令"></a>文本搜索的基本命令</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">搜索</td>
<td style="text-align:left"><code>/</code>在文件中向前搜索<br><code>?</code>在文件中向后搜索</td>
<td style="text-align:left">可使用正则表达式，可配合操作数使用，<br>比如<code>3/str</code>向前搜索字串str并将光标移到第三个找到的串</td>
</tr>
<tr>
<td style="text-align:left">搜索下一个</td>
<td style="text-align:left"><code>n</code>搜索下一个<br><code>N</code>反向搜索下一个</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="文本搜索的高效命令"><a href="#文本搜索的高效命令" class="headerlink" title="文本搜索的高效命令"></a>文本搜索的高效命令</h2><table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">快速搜索</td>
<td style="text-align:left"><code>*</code>在文件中向前搜索当前光标所在的单词<br><code>#</code>在文件中向后搜索当前光标所在的单词</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">显示搜索命令历史</td>
<td style="text-align:left"><code>q/</code>/<code>q?</code>显示搜索命令历史的窗口</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">查找帮助</td>
<td style="text-align:left"><code>Shift+k</code>查找光标所在命令或函数的man帮助</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h2><p>关于替换主是要结合搜索使用行命令来实现，命令格式为：</p>
<p><code>:m,ns/str1/str2/g</code>将m行到n行中的字串str1全部替换为字串str2。</p>
<p>在众多使用正则表达式进行替换的命令中，平时需要掌握的一个命令是如何快速去除<em>^M</em>字符。在Linux/Unix系统中编辑Windows操作系统中生成的文件时，如果上传时回车换行符处理不正确的话，用Vi/Vim打开经常会出现<em>^M</em>字符。如果上传的文件是shell脚本的话，即使赋予了正确的执行权限该脚本还是无法运行。这也是各种文件在Linux/Unix和Windows中传输经常会出现问题的地方之一。其实，在Vi/Vim中使用替换命令<code>:1,$s/^M//g</code>即可以很容易地快速去掉<em>^M</em>字符。这里需要注意的是<em>^M</em>是使用<code>Ctrl+v</code>、<code>Ctrl+m</code>输入的。</p>
<h1 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h1><p>在Vi/Vim中还可以在命令模式下执行各种外部命令，命令格式如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">执行外部命令</td>
<td style="text-align:left"><code>:!&lt;cmd&gt;</code>执行外部命令<cmd></cmd></td>
<td style="text-align:left">在命令模式下输入该命令</td>
</tr>
<tr>
<td style="text-align:left">显示命令行命令历史</td>
<td style="text-align:left"><code>q:</code>显示命令行命令历史的窗口</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1 id="Vi-Vim设置命令"><a href="#Vi-Vim设置命令" class="headerlink" title="Vi/Vim设置命令"></a>Vi/Vim设置命令</h1><p>Vi/Vim有很多内部变量，可以根据需要进行相应的设置。变量类型不同往往设置方式也不一样，简单的只要设置特定的变量名即可，复杂的则需要指定和分配一个显式值来设置变量。在实际应用中，如果有需要，请参考Vi/Vim的使用手册。这里主要列出大家经常使用并能提高编辑效率的一些设置命令：</p>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查看设置的当前值</td>
<td style="text-align:left"><code>:set all</code>查看Vi/Vim中设置的所有选项的当前值<br><code>:set &lt;option&gt;?</code>查看特定选项<option>的当前值</option></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">设置行号显示与否</td>
<td style="text-align:left"><code>:set number</code>显示行号<br><code>:set nonumber</code>取消行号显示</td>
<td style="text-align:left">命令的简写形式：<code>:set nu</code>、<code>:set nonu</code></td>
</tr>
<tr>
<td style="text-align:left">设置自动缩进</td>
<td style="text-align:left"><code>:set autoindent</code>设置自动缩进<br><code>:set noautoindent</code>取消自动缩进设置</td>
<td style="text-align:left">命令的简写形式：<code>:set ai</code>、<code>:set noai</code></td>
</tr>
<tr>
<td style="text-align:left">设置缩进宽度</td>
<td style="text-align:left"><code>:set shiftwidth=4</code>设置缩进宽度为4</td>
<td style="text-align:left">命令的简写形式：<code>:set sw=4</code></td>
</tr>
<tr>
<td style="text-align:left">设置大小写忽略与否</td>
<td style="text-align:left"><code>:set ignorecase</code>设置忽略大小<br><code>:set noignorecase</code>取消忽略大小设置</td>
<td style="text-align:left">命令的简写形式：<code>:set ic</code>、<code>:set noic</code></td>
</tr>
<tr>
<td style="text-align:left">设置不可见字符显示与否</td>
<td style="text-align:left"><code>:set list</code>显示不可见字符<br><code>:set nolist</code>取消显示不可见字符设置</td>
<td style="text-align:left">在显示不可见字符的情况下，<br>TAB键显示为<code>^I</code>，而$显示在每行的结尾</td>
</tr>
</tbody>
</table>
<p>执行这些设置命令只修改当前会话的设置，退出或重启Vi/Vim这些设置就丢失了。要想保持住这些设置，就必须将这些设置写入Vi/Vim的<em>vimrc</em>文件。对Linux/Unix操作系统来说，每个用户的<em>vimrc</em>文件位于该用户的主目录下，文件名为<em>.vimrc</em>。Vi/Vim在每次启动的时候都会读取用户主目录下的<em>vimrc</em>文件并据此设置Vi/Vim的使用环境。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vi最初是由Bill Joy于1976年编码实现的，而Vim(Vi IMproved)则是改进的Vi，由Bram Moolenaar在1991年开发并发布。Vi/Vim是所有Unix/Linux操作系统默认配备的编辑器。功能强大、操作高效，命令非常多、用法极为灵活。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.wuzhiwei.cn/categories/Linux/"/>
    
      <category term="vim" scheme="http://blog.wuzhiwei.cn/categories/Linux/vim/"/>
    
    
  </entry>
  
  <entry>
    <title>享元模式（Flyweight Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-flyweight.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-flyweight.html</id>
    <published>2017-04-18T10:59:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>享元模式(Flyweight Pattern)：</strong>运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象享元角色</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">($state)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体享元角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_intrinsicState = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($state)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_intrinsicState = $state;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">($state)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'ConcreteFlyweight operation, Intrinsic State = '</span> . <span class="keyword">$this</span>-&gt;_intrinsicState</div><div class="line">        . <span class="string">' Extrinsic State = '</span> . $state . <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 不共享的具体享元，客户端直接调用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_intrinsicState = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($state)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_intrinsicState = $state;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">($state)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'UnsharedConcreteFlyweight operation, Intrinsic State = '</span> . <span class="keyword">$this</span>-&gt;_intrinsicState</div><div class="line">        . <span class="string">' Extrinsic State = '</span> . $state . <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 享元工厂角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_flyweights;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_flyweights = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlyweigth</span><span class="params">($state)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_flyweights[$state])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_flyweights[$state];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_flyweights[$state] = <span class="keyword">new</span> ConcreteFlyweight($state);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $flyweightFactory = <span class="keyword">new</span> FlyweightFactory();</div><div class="line">        $flyweight = $flyweightFactory-&gt;getFlyweigth(<span class="string">'state A'</span>);</div><div class="line">        $flyweight-&gt;operation(<span class="string">'other state A'</span>);</div><div class="line"></div><div class="line">        $flyweight = $flyweightFactory-&gt;getFlyweigth(<span class="string">'state B'</span>);</div><div class="line">        $flyweight-&gt;operation(<span class="string">'other state B'</span>);</div><div class="line"></div><div class="line">        <span class="comment">/* 不共享的对象，单独调用 */</span></div><div class="line">        $uflyweight = <span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">'state A'</span>);</div><div class="line">        $uflyweight-&gt;operation(<span class="string">'other state A'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>享元模式是一个考虑系统性能的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能。</p>
<p>享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</p>
<p>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态(Internal State)和外部状态(External State)。</p>
<ul>
<li>内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享。</li>
<li>外部状态是随环境改变而改变的、不可以共享的状态。享元对象的外部状态必须由客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的。</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>享元模式的优点：</p>
<ol>
<li>享元模式的优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li>
<li>享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>享元模式的缺点：</p>
<ol>
<li>享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li>
<li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用享元模式：</p>
<ol>
<li>一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费。</li>
<li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li>
<li>使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复使用享元对象时才值得使用享元模式。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>
<li>享元模式包含四个角色：抽象享元类声明一个接口，通过它可以接受并作用于外部状态；具体享元类实现了抽象享元接口，其实例称为享元对象；非共享具体享元是不能被共享的抽象享元类的子类；享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>
<li>享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态和外部状态。其中内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享；外部状态是随环境改变而改变的、不可以共享的状态。</li>
<li>享元模式主要优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份；其缺点是使得系统更加复杂，并且需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li>
<li>享元模式适用情况包括：一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费；对象的大部分状态都可以外部化，可以将这些外部状态传入对象中；多次重复使用享元对象。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;享元模式(Flyweight Pattern)：&lt;/strong&gt;运用共享技术有效地支持大量细粒度对象的复用
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式（Facade Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-facade.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-facade.html</id>
    <published>2017-04-18T10:58:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>外观模式(Facade Pattern)：</strong>外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为<em>门面模式</em>，它是一种对象结构型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 相机类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Camera</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 打开录像机</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turnOn</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Turning on the camera.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭录像机</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turnOff</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Turning off the camera.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转到录像机</div><div class="line">     * <span class="doctag">@param</span> &lt;type&gt; $degrees</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rotate</span><span class="params">($degrees)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'rotating the camera by '</span>, $degrees, <span class="string">' degrees.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 灯类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 开灯</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turnOn</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Turning on the light.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关灯</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turnOff</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Turning off the light.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 换灯泡</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeBulb</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'changing the light-bulb.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 感应器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sensor</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 启动感应器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Activating the sensor.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭感应器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deactivate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Deactivating the sensor.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 触发感应器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'The sensor has been trigged.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alarm</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 启动警报器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Activating the alarm.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 关闭警报器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deactivate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Deactivating the alarm.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 拉响警报器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ring</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Ring the alarm.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 停掉警报器</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stopRing</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Stop the alarm.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 门面类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityFacade</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 录像机 */</span></div><div class="line">    <span class="keyword">private</span> $_camera1, $_camera2;</div><div class="line">    <span class="comment">/* 灯 */</span></div><div class="line">    <span class="keyword">private</span> $_light1, $_light2, $_light3;</div><div class="line">    <span class="comment">/* 感应器 */</span></div><div class="line">    <span class="keyword">private</span> $_sensor;</div><div class="line">    <span class="comment">/* 警报器 */</span></div><div class="line">    <span class="keyword">private</span> $_alarm;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_camera1 = <span class="keyword">new</span> Camera();</div><div class="line">        <span class="keyword">$this</span>-&gt;_camera2 = <span class="keyword">new</span> Camera();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;_light1 = <span class="keyword">new</span> Light();</div><div class="line">        <span class="keyword">$this</span>-&gt;_light2 = <span class="keyword">new</span> Light();</div><div class="line">        <span class="keyword">$this</span>-&gt;_light3 = <span class="keyword">new</span> Light();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;_sensor = <span class="keyword">new</span> Sensor();</div><div class="line">        <span class="keyword">$this</span>-&gt;_alarm = <span class="keyword">new</span> Alarm();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_camera1-&gt;turnOn();</div><div class="line">        <span class="keyword">$this</span>-&gt;_camera2-&gt;turnOn();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;_light1-&gt;turnOn();</div><div class="line">        <span class="keyword">$this</span>-&gt;_light2-&gt;turnOn();</div><div class="line">        <span class="keyword">$this</span>-&gt;_light3-&gt;turnOn();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;_sensor-&gt;activate();</div><div class="line">        <span class="keyword">$this</span>-&gt;_alarm-&gt;activate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">deactivate</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_camera1-&gt;turnOff();</div><div class="line">        <span class="keyword">$this</span>-&gt;_camera2-&gt;turnOff();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;_light1-&gt;turnOff();</div><div class="line">        <span class="keyword">$this</span>-&gt;_light2-&gt;turnOff();</div><div class="line">        <span class="keyword">$this</span>-&gt;_light3-&gt;turnOff();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;_sensor-&gt;deactivate();</div><div class="line">        <span class="keyword">$this</span>-&gt;_alarm-&gt;deactivate();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_security;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>::$_security = <span class="keyword">new</span> SecurityFacade();</div><div class="line">        <span class="keyword">self</span>::$_security-&gt;activate();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。</p>
<ul>
<li>外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。</li>
<li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li>
<li>外观模式的目的在于降低系统的复杂程度。</li>
<li>外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>外观模式的优点：</p>
<ol>
<li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li>
<li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li>
<li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li>
<li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>外观模式的缺点：</p>
<ol>
<li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li>
<li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用外观模式：</p>
<ol>
<li>要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li>
<li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li>
<li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>
<li>外观模式包含两个角色：外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。</li>
<li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li>
<li>外观模式主要优点在于对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易，它实现了子系统与客户之间的松耦合关系，并降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程；其缺点在于不能很好地限制客户使用子系统类，而且在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>
<li>外观模式适用情况包括：要为一个复杂子系统提供一个简单接口；客户程序与多个子系统之间存在很大的依赖性；在层次化结构中，需要定义系统中每一层的入口，使得层与层之间不直接产生联系。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;外观模式(Facade Pattern)：&lt;/strong&gt;外部与一个子系统的通信必须通过一个统一的外观对象
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>桥接模式（Bridge Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-bridge.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-bridge.html</id>
    <published>2017-04-18T10:48:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>桥接模式(Bridge Pattern)：</strong>将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种<em>对象结构型模式</em>，又称为<em>柄体(Handle and Body)模式</em>或<em>接口(Interface)模式</em>。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象化角色</span></div><div class="line"><span class="comment">// 抽象化给出的定义，并保存一个对实现化对象的引用。</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 对实现化对象的引用 */</span></div><div class="line">    <span class="keyword">protected</span> $imp;</div><div class="line">    <span class="comment">// 某操作方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;imp-&gt;operationImp();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 修正抽象化角色</span></div><div class="line"><span class="comment">// 扩展抽象化角色，改变和修正父类对抽象化的定义。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Implementor $imp)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;imp = $imp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 操作方法在修正抽象化角色中的实现</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'RefinedAbstraction operation  '</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;imp-&gt;operationImp();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现化角色</span></div><div class="line"><span class="comment">// 给出实现化角色的接口，但不给出具体的实现。</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementor</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 操作方法的实现化声明</span></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationImp</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体化角色A</span></div><div class="line"><span class="comment">// 给出实现化角色接口的具体实现</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 操作方法的实现化实现</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationImp</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Concrete implementor A operation &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体化角色B</span></div><div class="line"><span class="comment">// 给出实现化角色接口的具体实现</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 操作方法的实现化实现</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationImp</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Concrete implementor B operation &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $abstraction = <span class="keyword">new</span> RefinedAbstraction(<span class="keyword">new</span> ConcreteImplementorA());</div><div class="line">        $abstraction-&gt;operation();</div><div class="line"></div><div class="line">        $abstraction = <span class="keyword">new</span> RefinedAbstraction(<span class="keyword">new</span> ConcreteImplementorB());</div><div class="line">        $abstraction-&gt;operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>理解桥接模式，重点需要理解如何将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化。</p>
<ul>
<li><strong>抽象化：</strong>抽象化就是忽略一些信息，把不同的实体当作同样的实体对待。在面向对象中，将对象的共同性质抽取出来形成类的过程即为抽象化的过程。</li>
<li><strong>实现化：</strong>针对抽象化给出的具体实现，就是实现化，抽象化与实现化是一对互逆的概念，实现化产生的对象比抽象化更具体，是对抽象化事物的进一步具体化的产物。</li>
<li><strong>脱耦：</strong>脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，将两个角色之间的继承关系改为关联关系。桥接模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而不是继承关系，从而使两者可以相对独立地变化，这就是桥接模式的用意。</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>桥接模式的优点:</p>
<p>分离抽象接口及其实现部分。</p>
<ol>
<li>桥接模式有时类似于多继承方案，但是多继承方案违背了类的单一职责原则（即一个类只有一个变化的原因），复用性比较差，而且多继承结构中类的个数非常庞大，桥接模式是比多继承方案更好的解决方法。</li>
<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</li>
<li>实现细节对客户透明，可以对用户隐藏实现细节。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>桥接模式的缺点:</p>
<ol>
<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>
<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用桥接模式：</p>
<ol>
<li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>
<li>抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。</li>
<li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>
<li>虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。</li>
<li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>桥接模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>
<li>桥接模式包含如下四个角色：抽象类中定义了一个实现类接口类型的对象并可以维护该对象；扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>
<li>在桥接模式中，抽象化(Abstraction)与实现化(Implementation)脱耦，它们可以沿着各自的维度独立变化。</li>
<li>桥接模式的主要优点是分离抽象接口及其实现部分，是比多继承方案更好的解决方法，桥接模式还提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，实现细节对客户透明，可以对用户隐藏实现细节；其主要缺点是增加系统的理解与设计难度，且识别出系统中两个独立变化的维度并不是一件容易的事情。</li>
<li>桥接模式适用情况包括：需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系；抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响；一个类存在两个独立变化的维度，且这两个维度都需要进行扩展；设计要求需要独立管理抽象化角色和具体化角色；不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;桥接模式(Bridge Pattern)：&lt;/strong&gt;将抽象部分与它的实现部分分离，使它们都可以独立地
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰模式（Decorator Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-decorator.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-decorator.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>装饰模式(Decorator Pattern)：</strong>动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为<em>包装器(Wrapper)</em>，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象构件角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 装饰角色</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span>  $_component;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_component = $component;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_component-&gt;operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 具体装饰类A</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::__construct($component);</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::operation(); <span class="comment">// 调用装饰类的操作</span></div><div class="line">        <span class="keyword">$this</span>-&gt;addedOperationA(); <span class="comment">// 新增加的操作</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 新增加的操作A，即装饰上的功能</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addedOperationA</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Add Operation A &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体装饰类B</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::__construct($component);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::operation();</div><div class="line">        <span class="keyword">$this</span>-&gt;addedOperationB();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 新增加的操作B，即装饰上的功能</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addedOperationB</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Add Operation B &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 具体构件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Concrete Component operation &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $component = <span class="keyword">new</span> ConcreteComponent();</div><div class="line">        $decoratorA = <span class="keyword">new</span> ConcreteDecoratorA($component);</div><div class="line">        $decoratorB = <span class="keyword">new</span> ConcreteDecoratorB($decoratorA);</div><div class="line"> </div><div class="line">        $decoratorA-&gt;operation();</div><div class="line">        $decoratorB-&gt;operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><ol>
<li>与继承关系相比，关联关系的主要优势在于不会破坏类的封装性，而且继承是一种耦合度较大的静态关系，无法在程序运行时动态扩展。在软件开发阶段，关联关系虽然不会比继承关系减少编码量，但是到了软件维护阶段，由于关联关系使系统具有较好的松耦合性，因此使得系统更加容易维护。当然，关联关系的缺点是比继承关系要创建更多的对象。</li>
<li>使用装饰模式来实现扩展比继承更加灵活，它以对客户透明的方式动态地给一个对象附加更多的责任。装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>装饰模式的优点:</p>
<ol>
<li>装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活性。</li>
<li>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的装饰器，从而实现不同的行为。</li>
<li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</li>
<li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>装饰模式的缺点:</p>
<ol>
<li>使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，同时还将产生很多具体装饰类。这些装饰类和小对象的产生将增加系统的复杂度，加大学习与理解的难度。</li>
<li>这种比继承更加灵活机动的特性，也同时意味着装饰模式比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用装饰模式：</p>
<ol>
<li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li>
<li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。</li>
<li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类定义不能继承（如final类）.</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模式。</li>
<li>装饰模式包含四个角色：抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）； 抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>
<li>使用装饰模式来实现扩展比继承更加灵活，它以对客户透明的方式动 态地给一个对象附加更多的责任。装饰模式可以在不需要创造更多子 类的情况下，将对象的功能加以扩展。</li>
<li>装饰模式的主要优点在于可以提供比继承更多的灵活性，可以通过一种动态的 方式来扩展一个对象的功能，并通过使用不同的具体装饰类以及这些装饰类的 排列组合，可以创造出很多不同行为的组合，而且具体构件类与具体装饰类可 以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类；其主要缺 点在于使用装饰模式进行系统设计时将产生很多小对象，而且装饰模式比继承 更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需 要逐级排查，较为烦琐。</li>
<li>装饰模式适用情况包括：在不影响其他对象的情况下，以动态、透明的方式给 单个对象添加职责；需要动态地给一个对象增加功能，这些功能也可以动态地 被撤销；当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展 和维护时。</li>
<li>装饰模式可分为透明装饰模式和半透明装饰模式：在透明装饰模式中，要求客 户端完全针对抽象编程，装饰模式的透明性要求客户端程序不应该声明具体构 件类型和具体装饰类型，而应该全部声明为抽象构件类型；半透明装饰模式允 许用户在客户端声明具体装饰者类型的对象，调用在具体装饰者中新增的方法。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;装饰模式(Decorator Pattern)：&lt;/strong&gt;动态地给一个对象增加一些额外的职责(Res
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式（Observer Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-observer.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-observer.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>观察者模式(Observer Pattern)：</strong>定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做<em>发布-订阅（Publish/Subscribe）模式</em>、<em>模型-视图（Model/View）模式</em>、<em>源-监听器（Source/Listener）模式</em>或<em>从属者（Dependents）模式</em>。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象目标角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加一个新的观察者对象</div><div class="line">     * <span class="doctag">@param</span> Observer $observer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">(Observer $observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除一个已注册过的观察者对象</div><div class="line">     * <span class="doctag">@param</span> Observer $observer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span><span class="params">(Observer $observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知所有注册过的观察者对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体目标角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_observers;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_observers = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加一个新的观察者对象</div><div class="line">     * <span class="doctag">@param</span> Observer $observer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">(Observer $observer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> array_push(<span class="keyword">$this</span>-&gt;_observers, $observer);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除一个已注册过的观察者对象</div><div class="line">     * <span class="doctag">@param</span> Observer $observer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span><span class="params">(Observer $observer)</span></span></div><div class="line">    &#123;</div><div class="line">        $index = array_search($observer, <span class="keyword">$this</span>-&gt;_observers);</div><div class="line">        <span class="keyword">if</span> ($index === <span class="keyword">FALSE</span> || ! array_key_exists($index, <span class="keyword">$this</span>-&gt;_observers)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_observers[$index]);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知所有注册过的观察者对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!is_array(<span class="keyword">$this</span>-&gt;_observers)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_observers <span class="keyword">as</span> $observer) &#123;</div><div class="line">            $observer-&gt;update();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 抽象观察者角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 观察者的名称*/</span></div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = $name;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 更新方法 */</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Observer'</span>, <span class="keyword">$this</span>-&gt;_name, <span class="string">' has notified.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $subject = <span class="keyword">new</span> ConcreteSubject();</div><div class="line">        <span class="comment">/* 添加第一个观察者 */</span></div><div class="line">        $observer1 = <span class="keyword">new</span> ConcreteObserver(<span class="string">'Martin'</span>);</div><div class="line">        $subject-&gt;attach($observer1);</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br /&gt; The First notify:&lt;br /&gt;'</span>;</div><div class="line">        $subject-&gt;notifyObservers();</div><div class="line">        <span class="comment">/* 添加第二个观察者 */</span></div><div class="line">        $observer2 = <span class="keyword">new</span> ConcreteObserver(<span class="string">'woophp'</span>);</div><div class="line">        $subject-&gt;attach($observer2);</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br /&gt; The Second notify:&lt;br /&gt;'</span>;</div><div class="line">        $subject-&gt;notifyObservers();</div><div class="line">        <span class="comment">/* 删除第一个观察者 */</span></div><div class="line">        $subject-&gt;detach($observer1);</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br /&gt; The Third notify:&lt;br /&gt;'</span>;</div><div class="line">        $subject-&gt;notifyObservers();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><ul>
<li>观察者模式描述了如何建立对象与对象之间的依赖关系，如何构造满足这种需求的系统。</li>
<li>这一模式中的关键对象是观察目标和观察者，一个目标可以有任意数目的与之相依赖的观察者，一旦目标的状态发生改变，所有的观察者都将得到通知。</li>
<li>作为对这个通知的响应，每个观察者都将即时更新自己的状态，以与目标状态同步，这种交互也称为发布-订阅(publishsubscribe)。目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接收通</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>观察者模式的优点：</p>
<ol>
<li>观察者模式可以实现表示层和数据逻辑层的分离，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有各种各样不同的表示层作为具体观察者角色。</li>
<li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。</li>
<li>观察者模式支持广播通信。</li>
<li>观察者模式符合“开闭原则”的要求。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>观察者模式的缺点：</p>
<ol>
<li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>
<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用观察者模式：</p>
<ol>
<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li>
<li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li>
<li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li>
<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。观察者模式是一种对象行为型模式。</li>
<li>观察者模式包含四个角色：目标又称为主题，它是指被观察的对象；具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；观察者将对观察目标的改变做出反应；在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>
<li>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。</li>
<li>观察者模式的主要优点在于可以实现表示层和数据逻辑层的分离，并在观察目标和观察者之间建立一个抽象的耦合，支持广播通信；其主要缺点在于如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间，而且如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>
<li>观察者模式适用情况包括：一个抽象模型有两个方面，其中一个方面依赖于另一个方面；一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变；一个对象必须通知其他对象，而并不知道这些对象是谁；需要在系统中创建一个触发链。</li>
<li>在JDK的java.util包中，提供了Observable类以及Observer接口，它们构成了Java语言对观察者模式的支持。<br>Next  Previous</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;观察者模式(Observer Pattern)：&lt;/strong&gt;定义对象间的一种一对多依赖关系，使得每当一
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>状态模式（State Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-state.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-state.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>状态模式(State Pattern)：</strong>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象(Objects for States)，状态模式是一种对象行为型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象状态角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">State</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Context $context)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体状态角色A 单例类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">implements</span> <span class="title">State</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 唯一的实例 */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_instance = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 静态工厂方法，返还此类的唯一实例 */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (is_null(<span class="keyword">self</span>::$_instance)) &#123;</div><div class="line">            <span class="keyword">self</span>::$_instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$_instance;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Context $context)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Concrete Sate A handle method&lt;br /&gt;'</span>;</div><div class="line">        $context-&gt;setState(ConcreteStateB::getInstance());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体状态角色B 单例类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">implements</span> <span class="title">State</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 唯一的实例 */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_instance = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 静态工厂方法，返还此类的唯一实例 */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (is_null(<span class="keyword">self</span>::$_instance)) &#123;</div><div class="line">            <span class="keyword">self</span>::$_instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$_instance;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Context $context)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Concrete Sate B handle method&lt;br /&gt;'</span>;</div><div class="line">        $context-&gt;setState(ConcreteStateA::getInstance());</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"><span class="comment">// 环境角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_state;</div><div class="line">    <span class="comment">// 默认为StateA</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_state = ConcreteStateA::getInstance();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span><span class="params">(State $state)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_state = $state;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_state-&gt;handle(<span class="keyword">$this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $context = <span class="keyword">new</span> Context();</div><div class="line">        $context-&gt;request();</div><div class="line">        $context-&gt;request();</div><div class="line">        $context-&gt;request();</div><div class="line">        $context-&gt;request();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><ol>
<li>状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。</li>
<li>状态模式的关键是引入了一个抽象类来专门表示对象的状态，这个类我们叫做抽象状态类，而对象的每一种具体状态类都继承了该类，并在不同具体状态类中实现了不同状态的行为，包括各种状态之间的转换。</li>
</ol>
<p>在状态模式结构中需要理解环境类与抽象状态类的作用：</p>
<ol>
<li>环境类实际上就是拥有状态的对象，环境类有时候可以充当状态管理器(State Manager)的角色，可以在环境类中对状态进行切换操作。</li>
<li>抽象状态类可以是抽象类，也可以是接口，不同状态类就是继承这个父类的不同子类，状态类的产生是由于环境类存在多个状态，同时还满足两个条件：这些状态经常需要切换，在不同的状态下对象的行为不同。因此可以将不同对象下的行为单独提取出来封装在具体的状态类中，使得环境类对象在其内部状态改变时可以改变它的行为，对象看起来似乎修改了它的类，而实际上是由于切换到不同的具体状态类实现的。由于环境类可以设置为任一具体状态类，因此它针对抽象状态类进行编程，在程序运行时可以将任一具体状态类的对象设置到环境类中，从而使得环境类可以改变内部状态，并且改变行为。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>状态模式的优点：</p>
<ol>
<li>封装了转换规则。</li>
<li>枚举可能的状态，在枚举状态之前需要确定状态种类。</li>
<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li>
<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li>
<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>状态模式的缺点：</p>
<ol>
<li>状态模式的使用必然会增加系统类和对象的个数。</li>
<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li>
<li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用状态模式：</p>
<ol>
<li>对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为。</li>
<li>代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，使客户类与类库之间的耦合增强。在这些条件语句中包含了对象的行为，而且这些条件对应于对象的各种状态。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象，状态模式是一种对象行为型模式。</li>
<li>状态模式包含三个角色：环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>
<li>状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。</li>
<li>状态模式的主要优点在于封装了转换规则，并枚举可能的状态，它将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为，还可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数；其缺点在于使用状态模式会增加系统类和对象的个数，且状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，对于可以切换状态的状态模式不满足“开闭原则”的要求。</li>
<li>状态模式适用情况包括：对象的行为依赖于它的状态（属性）并且可以根据它的状态改变而改变它的相关行为；代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，使客户类与类库之间的耦合增强。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;状态模式(State Pattern)：&lt;/strong&gt;允许一个对象在其内部状态改变时改变它的行为，对象看
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>命令模式（Command Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-command.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-command.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>命令模式(Command Pattern)：</strong>将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种<em>对象行为型模式</em>，其别名为<strong>动作(Action)模式</strong>或<strong>事务(Transaction)模式</strong>。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 命令角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 执行方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体命令角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_receiver;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Receiver $receiver)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_receiver = $receiver;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 执行方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_receiver-&gt;action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 接收者角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 接收者名称 */</span></div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = $name;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 行动方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_name, <span class="string">' do action.&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 请求者角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_command;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Command $command)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_command = $command;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_command-&gt;execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $receiver = <span class="keyword">new</span> Receiver(<span class="string">'woophp'</span>);</div><div class="line">        $command = <span class="keyword">new</span> ConcreteCommand($receiver);</div><div class="line">        $invoker = <span class="keyword">new</span> Invoker($command);</div><div class="line">        $invoker-&gt;action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。</p>
<ul>
<li>每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。</li>
<li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。</li>
<li>命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li>
<li>命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>命令模式的优点：</p>
<ol>
<li>降低系统的耦合度。</li>
<li>新的命令可以很容易地加入到系统中。</li>
<li>可以比较容易地设计一个命令队列和宏命令（组合命令）。</li>
<li>可以方便地实现对请求的Undo和Redo。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>命令模式的缺点：</p>
<ol>
<li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用命令模式：</p>
<ol>
<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li>
<li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li>
<li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li>
<li>系统需要将一组操作组合在一起，即支持宏命令。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>在命令模式中，将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>
<li>命令模式包含四个角色：抽象命令类中声明了用于执行请求的<code>execute()</code>等方法，通过这些方法可以调用请求接收者的相关操作；具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>
<li>令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。</li>
<li>命令模式的主要优点在于降低系统的耦合度，增加新的命令很方便，而且可以比较容易地设计一个命令队列和宏命令，并方便地实现对请求的撤销和恢复；其主要缺点在于可能会导致某些系统有过多的具体命令类。</li>
<li>命令模式适用情况包括：需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互；需要在不同的时间指定请求、将请求排队和执行请求；需要支持命令的撤销操作和恢复操作，需要将一组操作组合在一起，即支持宏命令。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;命令模式(Command Pattern)：&lt;/strong&gt;将一个请求封装为一个对象，从而使我们可用不同的
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式（Adapter Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-adapter.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-adapter.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>适配器模式(Adapter Pattern)：</strong>将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为<em>包装器(Wrapper)</em>。适配器模式既可以作为<em>类结构型模式</em>，也可以作为<em>对象结构型模式</em>。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><h2 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h2><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 目标角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 源类也有的方法1</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod1</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 源类没有的方法2</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 源角色 适配者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 源类含有的方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod1</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Adaptee sampleMethod1 &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 类适配器角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 源类中没有sampleMethod2方法，在此补充</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod2</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Adapter sampleMethod2 &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $adapter = <span class="keyword">new</span> Adapter();</div><div class="line">        $adapter-&gt;sampleMethod1();</div><div class="line">        $adapter-&gt;sampleMethod2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h2 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h2><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 目标角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 源类也有的方法1</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod1</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 源类没有的方法2</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 源角色 适配者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 源类含有的方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod1</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Adaptee sampleMethod1 &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 类适配器角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_adaptee;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adaptee $adaptee)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_adaptee = $adaptee;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 委派调用Adaptee的sampleMethod1方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod1</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_adaptee-&gt;sampleMethod1();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 源类中没有sampleMethod2方法，在此补充</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Adapter sampleMethod2 &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $adaptee = <span class="keyword">new</span> Adaptee();</div><div class="line">        $adapter = <span class="keyword">new</span> Adapter($adaptee);</div><div class="line">        $adapter-&gt;sampleMethod1();</div><div class="line">        $adapter-&gt;sampleMethod2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li>
<li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li>
<li>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li>
</ol>
<p><em>类适配器模式</em>还具有如下优点：<br>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。<br><em>对象适配器模式</em>还具有如下优点：<br>一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p><em>类适配器模式</em>的缺点如下：<br>对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。<br><em>对象适配器模式</em>的缺点如下：<br>与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用适配器模式：</p>
<ol>
<li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li>
<li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>结构型模式描述如何将类或者对象结合在一起形成更大的结构。</li>
<li>适配器模式用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>
<li>适配器模式包含四个角色：目标抽象类定义客户要用的特定领域的接口；适配器类可以调用另一个接口，作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心；适配者类是被适配的角色，它定义了一个已经存在的接口，这个接口需要适配；在客户类中针对目标抽象类进行编程，调用在目标抽象类中定义的业务方法。</li>
<li>在类适配器模式中，适配器类实现了目标抽象类接口并继承了适配者类，并在目标抽象类的实现方法中调用所继承的适配者类的方法；在对象适配器模式中，适配器类继承了目标抽象类并定义了一个适配者类的对象实例，在所继承的目标抽象类方法中调用适配者类的相应业务方法。</li>
<li>适配器模式的主要优点是将目标类和适配者类解耦，增加了类的透明性和复用性，同时系统的灵活性和扩展性都非常好，更换适配器或者增加新的适配器都非常方便，符合“开闭原则”；类适配器模式的缺点是适配器类在很多编程语言中不能同时适配多个适配者类，对象适配器模式的缺点是很难置换适配者类的方法。</li>
<li>适配器模式适用情况包括：系统需要使用现有的类，而这些类的接口不符合系统的需要；想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类一起工作。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;适配器模式(Adapter Pattern)：&lt;/strong&gt;将一个接口转换成客户希望的另一个接口，适配器
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>组合模式（Composite Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-composite.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-composite.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>组合模式（Composite）：</strong>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使用户对单个对象和组合对象的使用具有一致性。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><h2 id="安全式的组合模式"><a href="#安全式的组合模式" class="headerlink" title="安全式的组合模式"></a>安全式的组合模式</h2><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象组件角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 返回自己的实例</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getComposite</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 示例方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 树枝组件角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_composites;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_composites = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getComposite</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 示例方法，调用各个子对象的operation方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Composite operation begin:&lt;br /&gt;'</span>;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_composites <span class="keyword">as</span> $composite) &#123;</div><div class="line">            $composite-&gt;operation();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Composite operation end:&lt;br /&gt;&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 添加一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_composites[] = $component;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 删除一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     * <span class="doctag">@return</span> boolean  删除是否成功</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_composites <span class="keyword">as</span> $key =&gt; $row) &#123;</div><div class="line">            <span class="keyword">if</span> ($component == $row) &#123;</div><div class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_composites[$key]);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 聚集管理方法 返回所有的子对象</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_composites;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = $name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Leaf operation '</span>, <span class="keyword">$this</span>-&gt;_name, <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getComposite</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $leaf1 = <span class="keyword">new</span> Leaf(<span class="string">'first'</span>);</div><div class="line">        $leaf2 = <span class="keyword">new</span> Leaf(<span class="string">'second'</span>);</div><div class="line"> </div><div class="line">        $composite = <span class="keyword">new</span> Composite();</div><div class="line">        $composite-&gt;add($leaf1);</div><div class="line">        $composite-&gt;add($leaf2);</div><div class="line">        $composite-&gt;operation();</div><div class="line"> </div><div class="line">        $composite-&gt;remove($leaf2);</div><div class="line">        $composite-&gt;operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h2 id="透明式的组合模式"><a href="#透明式的组合模式" class="headerlink" title="透明式的组合模式"></a>透明式的组合模式</h2><p>在<em>Composite</em>类里面声明所有的用来管理子类对象的方法。这样做的是好处是所有的组件类都有相同的接口。在客户端看来，树叶类和合成类对象的区别起码在接口层次上消失了，客户端可以同等的对待所有的对象。这就是<strong>透明式的组合模式</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象组件角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 返回自己的实例</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getComposite</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 示例方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 添加一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(Component $component)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 删除一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     * <span class="doctag">@return</span> boolean  删除是否成功</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">(Component $component)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 返回所有的子对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 树枝组件角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_composites;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_composites = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getComposite</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 示例方法，调用各个子对象的operation方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Composite operation begin:&lt;br /&gt;'</span>;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_composites <span class="keyword">as</span> $composite) &#123;</div><div class="line">            $composite-&gt;operation();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Composite operation end:&lt;br /&gt;&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 添加一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_composites[] = $component;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 删除一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     * <span class="doctag">@return</span> boolean  删除是否成功</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_composites <span class="keyword">as</span> $key =&gt; $row) &#123;</div><div class="line">            <span class="keyword">if</span> ($component == $row) &#123;</div><div class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_composites[$key]);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 聚集管理方法 返回所有的子对象</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_composites;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = $name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Leaf operation '</span>, <span class="keyword">$this</span>-&gt;_name, <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getComposite</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 添加一个子对象,此处没有具体实现，仅返回一个FALSE</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 删除一个子对象</div><div class="line">     * <span class="doctag">@param</span> Component $component  子对象</div><div class="line">     * <span class="doctag">@return</span> boolean  此处没有具体实现，仅返回一个FALSE</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">(Component $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 聚集管理方法 返回所有的子对象 此处没有具体实现，返回null</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $leaf1 = <span class="keyword">new</span> Leaf(<span class="string">'first'</span>);</div><div class="line">        $leaf2 = <span class="keyword">new</span> Leaf(<span class="string">'second'</span>);</div><div class="line"></div><div class="line">        $composite = <span class="keyword">new</span> Composite();</div><div class="line">        $composite-&gt;add($leaf1);</div><div class="line">        $composite-&gt;add($leaf2);</div><div class="line">        $composite-&gt;operation();</div><div class="line"></div><div class="line">        $composite-&gt;remove($leaf2);</div><div class="line">        $composite-&gt;operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>简化客户代码；</li>
<li>使得更容易增加新类型的组件。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>使你的设计变得更加一般化，容易增加组件也会产生一些问题，那就是很难限制组合中的组件。</p>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><ol>
<li>你想表示对象的部分-整体层次结构；</li>
<li>你希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;组合模式（Composite）：&lt;/strong&gt;将对象组合成树形结构以表示“部分-整体”的层次结构。组合模
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式（Proxy Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-proxy.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-proxy.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>代理模式(Proxy Pattern)：</strong>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做<em>Proxy</em>或<em>Surrogate</em>，它是一种对象结构型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象主题角色（Subject），定义了RealSubject和Proxy公用接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 真正的主题角色（RealSubject），定义了Proxy所代表的真实实体</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = $name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_name . <span class="string">'在吃饭&lt;br&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_name . <span class="string">'在跑步&lt;br&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 代理对象（Proxy）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_realSubject = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(RealSubject $realSubject = null)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($realSubject)) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_realSubject = <span class="keyword">new</span> RealSubject();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_realSubject = $realSubject;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_realSubject-&gt;say();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_realSubject-&gt;run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $rs = <span class="keyword">new</span> RealSubject(<span class="string">'张三'</span>);</div><div class="line">        $proxy = <span class="keyword">new</span> Proxy($rs);</div><div class="line">        $proxy-&gt;say();</div><div class="line">        $proxy-&gt;run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>代理模式的优点：</p>
<ol>
<li>代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。</li>
<li>远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>
<li>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>
<li>保护代理可以控制对真实对象的使用权限。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>代理模式的缺点：</p>
<ol>
<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>
<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>根据代理模式的使用目的，常见的代理模式有以下几种类型：</p>
<ol>
<li>远程(Remote)代理：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又叫做<em>大使(Ambassador)</em>。</li>
<li>虚拟(Virtual)代理：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li>
<li>Copy-on-Write代理：它是虚拟代理的一种，把复制（克隆）操作延迟到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。</li>
<li>保护(Protect or Access)代理：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li>
<li>缓冲(Cache)代理：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li>
<li>防火墙(Firewall)代理：保护目标不让恶意用户接近。</li>
<li>同步化(Synchronization)代理：使几个用户能够同时使用一个对象而没有冲突。</li>
<li>智能引用(Smart Reference)代理：当一个对象被引用时，提供一些额外的操作，如将此对象被调用的次数记录下来等。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>在代理模式中，要求给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>
<li>代理模式包含三个角色：抽象主题角色声明了真实主题和代理主题的共同接口；代理主题角色内部包含对真实主题的引用，从而可以在任何时候操作真实主题对象；真实主题角色定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的方法。</li>
<li>代理模式的优点在于能够协调调用者和被调用者，在一定程度上降低了系统的耦合度；其缺点在于由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，并且实现代理模式需要额外的工作，有些代理模式的实现非常复杂。远程代理为一个位于不同的地址空间的对象提供一个本地的代表对象，它使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>
<li>如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建，这个小对象称为虚拟代理。虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>
<li>保护代理可以控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;代理模式(Proxy Pattern)：&lt;/strong&gt;给某一个对象提供一个代理，并由代理对象控制对原对象
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>策略模式（Strategy Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-strategy.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-strategy.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>策略模式(Strategy Pattern)：</strong>定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。</p>
<p>策略模式是一种对象行为型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象策略角色，以接口实现</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithmInterface</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体策略角色A</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithmInterface</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'algorithmInterface A&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体策略角色B</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithmInterface</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'algorithmInterface B&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体策略角色C</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyC</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithmInterface</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'algorithmInterface C&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 环境角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 引用的策略 */</span></div><div class="line">    <span class="keyword">private</span> $_strategy;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Strategy $strategy)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_strategy = $strategy;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">contextInterface</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_strategy-&gt;algorithmInterface();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $strategyA = <span class="keyword">new</span> ConcreteStrategyA();</div><div class="line">        $context = <span class="keyword">new</span> Context($strategyA);</div><div class="line">        $context-&gt;contextInterface();</div><div class="line"></div><div class="line">        $strategyB = <span class="keyword">new</span> ConcreteStrategyB();</div><div class="line">        $context = <span class="keyword">new</span> Context($strategyB);</div><div class="line">        $context-&gt;contextInterface();</div><div class="line"></div><div class="line">        $strategyC = <span class="keyword">new</span> ConcreteStrategyC();</div><div class="line">        $context = <span class="keyword">new</span> Context($strategyC);</div><div class="line">        $context-&gt;contextInterface();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><ol>
<li>策略模式是一个比较容易理解和使用的设计模式，策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。</li>
<li>在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。</li>
<li>策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中“退休”的方便，策略模式并不决定在何时使用何种算法，算法的选择由客户端来决定。这在一定程度上提高了系统的灵活性，但是客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，这也是策略模式的缺点之一，在一定程度上增加了客户端的使用难度。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>策略模式的优点：</p>
<ol>
<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>
<li>策略模式提供了管理相关的算法族的办法。</li>
<li>策略模式提供了可以替换继承关系的办法。</li>
<li>使用策略模式可以避免使用多重条件转移语句。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>策略模式的缺点：</p>
<ol>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用策略模式：</p>
<ul>
<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>
<li>一个系统需要动态地在几种算法中选择一种。</li>
<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>
<li>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>在策略模式中定义了一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式。策略模式是一种对象行为型模式。</li>
<li>策略模式包含三个角色：环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例；抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类；具体策略类实现了在抽象策略类中定义的算法。</li>
<li>策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。</li>
<li>策略模式主要优点在于对“开闭原则”的完美支持，在不修改原有系统的基础上可以更换算法或者增加新的算法，它很好地管理算法族，提高了代码的复用性，是一种替换继承，避免多重条件转移语句的实现方式；其缺点在于客户端必须知道所有的策略类，并理解其区别，同时在一定程度上增加了系统中类的个数，可能会存在很多策略类。</li>
<li>策略模式适用情况包括：在一个系统里面有许多类，它们之间的区别仅在于它们的行为，使用策略模式可以动态地让一个对象在许多行为中选择一种行为；一个系统需要动态地在几种算法中选择一种；避免使用难以维护的多重条件选择语句；希望在具体策略类中封装算法和与相关的数据结构。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;策略模式(Strategy Pattern)：&lt;/strong&gt;定义一系列算法，将每一个算法封装起来，并让它
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>中介者模式（Mediator Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-mediator.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-mediator.html</id>
    <published>2017-04-18T10:38:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>中介者模式(Mediator Pattern)</strong>定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象中介类</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($message, $colleague)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 抽象同事类</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_mediator = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($mediator)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_mediator = $mediator;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_mediators-&gt;send($message, <span class="keyword">$this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">($message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体中介类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_colleague1 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> $_colleague2 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($message, $colleague)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($colleague == <span class="keyword">$this</span>-&gt;_colleague1) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_colleague1-&gt;notify($message);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_colleague2-&gt;notify($message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($colleague1, $colleague2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_colleague1 = $colleague1;</div><div class="line">        <span class="keyword">$this</span>-&gt;_colleague2 = $colleague2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体同事类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Colleague1 Message is :"</span>.$message.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体同事类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Colleague2 Message is :"</span>.$message.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> funciton main()</div><div class="line">    &#123;</div><div class="line">        $mediator = <span class="keyword">new</span> ConcreteMediator();</div><div class="line">        $c1 = <span class="keyword">new</span> Colleague1($mediator);</div><div class="line">        $c2 = <span class="keyword">new</span> Colleague2($mediator);</div><div class="line">        $mediator-&gt;set($c1, $c2);</div><div class="line">        $c1-&gt;send(<span class="string">'to c2 from c1'</span>);</div><div class="line">        $c2-&gt;send(<span class="string">'to c1 from c2'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>中介者模式可以使对象之间的关系数量急剧减少。</p>
<p>中介者承担两方面的职责：</p>
<ol>
<li>中转作用（结构性）：通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。</li>
<li>协调作用（行为性）：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>中介者模式的优点：</p>
<ol>
<li>简化了对象之间的交互。</li>
<li>将各同事解耦。</li>
<li>减少子类生成。</li>
<li>可以简化各同事类的设计和实现。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>中介者模式的缺点：</p>
<ol>
<li>在具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用中介者模式：</p>
<ol>
<li>系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。</li>
<li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</li>
<li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。</li>
<li>交互的公共行为，如果需要改变行为则可以增加新的中介者类。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</li>
<li>中介者模式包含四个角色：抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；抽象同事类定义各同事的公有方法；具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中定义的方法。</li>
<li>通过引入中介者对象，可以将系统的网状结构变成以中介者为中心的星形结构，中介者承担了中转作用和协调作用。中介者类是中介者模式的核心，它对整个系统进行控制和协调，简化了对象之间的交互，还可以对对象间的交互进行进一步的控制。</li>
<li>中介者模式的主要优点在于简化了对象之间的交互，将各同事解耦，还可以减少子类生成，对于复杂的对象之间的交互，通过引入中介者，可以简化各同事类的设计和实现；中介者模式主要缺点在于具体中介者类中包含了同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</li>
<li>中介者模式适用情况包括：系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解；一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象；想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;中介者模式(Mediator Pattern)&lt;/strong&gt;定义：用一个中介对象来封装一系列的对象交互，
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式（Singleton Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-singleton.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-singleton.html</id>
    <published>2017-04-18T10:18:55.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>单例模式(Singleton Pattern)：</strong>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为<em>单例类</em>，它提供全局访问的方法。</p>
<p>单例模式的要点有三个：一是<em>某个类只能有一个实例</em>；二是<em>它必须自行创建这个实例</em>；三是<em>它必须自行向整个系统提供这个实例</em>。单例模式是一种对象创建型模式。单例模式又名<em>单件模式</em>或<em>单态模式</em>。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 单例类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 静态成品变量 保存全局实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_instance = <span class="keyword">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 私有化默认构造方法，保证外界无法直接实例化</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 静态工厂方法，返还此类的唯一实例</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (is_null(<span class="keyword">self</span>::$_instance)) &#123;</div><div class="line">            <span class="keyword">self</span>::$_instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$_instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 防止用户克隆实例</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Clone is not allowed.'</span> . E_USER_ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试用方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Singleton Test!'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $instance = Singleton::getInstance();</div><div class="line">        $instance-&gt;test();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——Singleton。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p>
<p>在单例模式的实现过程中，需要注意如下三点：</p>
<ol>
<li>单例类的构造函数为私有；</li>
<li>提供一个自身的静态私有成员变量；</li>
<li>提供一个公有的静态工厂方法。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。</li>
<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li>
<li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol>
<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li>
<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li>
<li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用单例模式：</p>
<ol>
<li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li>
<li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li>
<li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</li>
<li>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的工厂方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</li>
<li>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过<code>new</code>关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法。该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</li>
<li>单例模式的主要优点在于提供了对唯一实例的受控访问并可以节约系统资源；其主要缺点在于因为缺少抽象层而难以扩展，且单例类职责过重。</li>
<li>单例模式适用情况包括：系统只需要一个实例对象；客户调用类的单个实例只允许使用一个公共访问点。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;单例模式(Singleton Pattern)：&lt;/strong&gt;单例模式确保某一个类只有一个实例，而且自行
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式（Builder Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-builder.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-builder.html</id>
    <published>2017-04-18T10:18:44.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>造者模式(Builder Pattern)：</strong>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为<em>生成器模式</em>。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 产品角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></div><div class="line">&#123;　　　　　　　　　　　　　　　　　　　　　　　　　　</div><div class="line">    <span class="comment">// 产品的组成部分集合</span></div><div class="line">    <span class="keyword">private</span> $_parts;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_parts = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($part)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> array_push(<span class="keyword">$this</span>-&gt;_parts, $part);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"the product include:"</span>;</div><div class="line">        array_map(<span class="string">'printf'</span>, <span class="keyword">$this</span>-&gt;_parts);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 抽象建造者 </span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 产品零件构造方法1</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPart1</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 产品零件构造方法2</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPart2</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 产品返还方法</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体建造者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_product;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_product = <span class="keyword">new</span> Product();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPart1</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_product-&gt;add(<span class="string">"Part1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPart2</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_product-&gt;add(<span class="string">"Part2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_product;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 导演者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Builder $builder)</span></span></div><div class="line">    &#123;</div><div class="line">        $builder-&gt;buildPart1();</div><div class="line">        $builder-&gt;buildPart2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $buidler = <span class="keyword">new</span> ConcreteBuilder();</div><div class="line">        $director = <span class="keyword">new</span> Director($buidler);</div><div class="line">        $product = $buidler-&gt;getResult();</div><div class="line">        $product-&gt;show();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>抽象建造者类中定义了产品的创建方法和返回方法;</p>
<p>建造者模式的结构中还引入了一个指挥者类Director，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p>
<p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>
<li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象 。</li>
<li>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li>
<li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol>
<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li>
<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用建造者模式：</p>
<ol>
<li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</li>
<li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li>
<li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。</li>
<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。</li>
<li>建造者模式包含如下四个角色：抽象建造者为创建一个产品对象的各个部件指定抽象接口；具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；产品角色是被构建的复杂对象，包含多个组成部件；指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>
<li>在建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>
<li>建造者模式的主要优点在于客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象，每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，符合“开闭原则”，还可以更加精细地控制产品的创建过程；其主要缺点在于由于建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，因此其使用范围受到一定的限制，如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li>
<li>建造者模式适用情况包括：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；需要生成的产品对象的属性相互依赖，需要指定其生成顺序；对象的创建过程独立于创建该对象的类；隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同类型的产品。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;造者模式(Builder Pattern)：&lt;/strong&gt;将一个复杂对象的构建与它的表示分离，使得同样的
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象工厂模式（Abstract Factory Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-abstract-factory.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-abstract-factory.html</id>
    <published>2017-04-18T09:58:09.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>抽象工厂模式(Abstract Factory Pattern)</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为<em>Kit模式</em>，属于对象创建型模式。</p>
<blockquote>
<p><strong>产品等级结构：</strong>产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。<br><strong>产品族：</strong>在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</p>
</blockquote>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象工厂</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建等级结构为A的产品的工厂方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createProductA</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 创建等级结构为B的产品的工厂方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createProductB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体工厂1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createProductA</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createProductB</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体工厂2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createProductA</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createProductB</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 抽象产品A</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractProductA</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 取得产品名</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 抽象产品B</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractProductB</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 取得产品名</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 具体产品Ａ1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">implements</span> <span class="title">AbstractProductA</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = <span class="string">'product A1'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体产品Ａ2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">implements</span> <span class="title">AbstractProductA</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = <span class="string">'product A2'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 具体产品B1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">implements</span> <span class="title">AbstractProductB</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = <span class="string">'product B1'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体产品B2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">implements</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $_name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_name = <span class="string">'product B2'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Main program.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>::run(<span class="keyword">new</span> ConcreteFactory1());</div><div class="line">        <span class="keyword">self</span>::run(<span class="keyword">new</span> ConcreteFactory2());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 调用工厂实例生成产品，输出产品名</div><div class="line">     * <span class="doctag">@param</span>   $factory    AbstractFactory     工厂实例</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(AbstractFactory $factory)</span></span></div><div class="line">    &#123;</div><div class="line">        $productA = $factory-&gt;createProductA();</div><div class="line">        $productB = $factory-&gt;createProductB();</div><div class="line">        <span class="keyword">echo</span> $productA-&gt;getName(), <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">        <span class="keyword">echo</span> $productB-&gt;getName(), <span class="string">'&lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><ol>
<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>
<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</li>
</ol>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。</li>
<li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li>
<li>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol>
<li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li>
<li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用抽象工厂模式：</p>
<ol>
<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</li>
<li>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li>
<li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li>
<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li>
<li>抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>
<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。</li>
<li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li>
<li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;抽象工厂模式(Abstract Factory Pattern)&lt;/strong&gt;：提供一个创建一系列相关或
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式（Factory Method Pattern）</title>
    <link href="http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-factory-method.html"/>
    <id>http://blog.wuzhiwei.cn/2017/04/18/php-design-pattern-factory-method.html</id>
    <published>2017-04-18T09:34:21.000Z</published>
    <updated>2017-06-06T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p><strong>工厂方法模式(Factory Method Pattern)</strong>又称为<em>工厂模式</em>，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 抽象工厂角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">factoryMethod</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体工厂角色 可多个A B C...</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 工厂方法 返回具体 产品</div><div class="line">     * <span class="doctag">@return</span> ConcreteProduct</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">factoryMethod</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 抽象产品角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span>;                                                                                    </div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体产品角色 可多个 A B C...</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">implements</span> <span class="title">Product</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 接口方法实现 输出特定字符串</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'ConcreteProduct &lt;br /&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $fc = <span class="keyword">new</span> ConcreteFactory();</div><div class="line">        $product = $fc-&gt;factoryMethod();</div><div class="line">        $product-&gt;operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Client::main();</div></pre></td></tr></table></figure>
<h1 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h1><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得<em>工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品</em>。</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li>
<li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li>
<li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而<em>只要添加一个具体工厂和具体产品</em>就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li>
</ol>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ol>
<li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li>
<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>
</ol>
<h1 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h1><p>在以下情况下可以使用工厂方法模式：</p>
<ol>
<li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</li>
<li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li>
<li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>工厂方法模式又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li>
<li>工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。</li>
<li>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li>
<li>工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</li>
<li>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;工厂方法模式(Factory Method Pattern)&lt;/strong&gt;又称为&lt;em&gt;工厂模式&lt;/em
    
    </summary>
    
      <category term="PHP" scheme="http://blog.wuzhiwei.cn/categories/PHP/"/>
    
    
  </entry>
  
</feed>
